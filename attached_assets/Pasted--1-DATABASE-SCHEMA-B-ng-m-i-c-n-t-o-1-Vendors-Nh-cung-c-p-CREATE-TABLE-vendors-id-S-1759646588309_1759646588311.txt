
üóÑÔ∏è 1. DATABASE SCHEMA
B·∫£ng m·ªõi c·∫ßn t·∫°o:
-- 1. Vendors (Nh√† cung c·∫•p)
CREATE TABLE vendors (
  id SERIAL PRIMARY KEY,
  shop_id VARCHAR,  -- N·∫øu multi-tenant
  name VARCHAR NOT NULL,
  email VARCHAR UNIQUE NOT NULL,
  phone VARCHAR,
  password_hash VARCHAR NOT NULL,
  
  -- Warehouse info
  warehouse_address TEXT,
  warehouse_province VARCHAR,
  warehouse_district VARCHAR,
  warehouse_ward VARCHAR,
  
  -- Payment settings
  payment_method VARCHAR DEFAULT 'deposit', -- 'deposit' ho·∫∑c 'monthly'
  deposit_balance DECIMAL(12,2) DEFAULT 0,
  deposit_total DECIMAL(12,2) DEFAULT 0,
  minimum_deposit DECIMAL(12,2) DEFAULT 1000000,
  
  -- Bank info
  bank_name VARCHAR,
  bank_account_number VARCHAR,
  bank_account_holder VARCHAR,
  bank_branch VARCHAR,
  
  -- Settings
  commission_rate DECIMAL(3,2) DEFAULT 0.30,
  notification_email BOOLEAN DEFAULT true,
  notification_sms BOOLEAN DEFAULT false,
  
  status VARCHAR DEFAULT 'active', -- active/inactive/suspended
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
-- 2. Vendor Products (H√†ng k√Ω g·ª≠i)
CREATE TABLE vendor_products (
  id SERIAL PRIMARY KEY,
  vendor_id INT REFERENCES vendors(id) ON DELETE CASCADE,
  product_id VARCHAR NOT NULL, -- ID s·∫£n ph·∫©m trong h·ªá th·ªëng ch√≠nh
  
  quantity_consigned INT NOT NULL,
  quantity_sold INT DEFAULT 0,
  quantity_returned INT DEFAULT 0,
  
  consignment_price DECIMAL(12,2) NOT NULL, -- Gi√° v·ªën
  discount_percent DECIMAL(3,2) DEFAULT 0, -- Chi·∫øt kh·∫•u cho shop
  
  consignment_date TIMESTAMP DEFAULT NOW(),
  expiry_date TIMESTAMP, -- H·∫øt h·∫°n k√Ω g·ª≠i
  
  status VARCHAR DEFAULT 'active', -- active/out_of_stock/expired/pending_approval
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
-- 3. Vendor Orders (ƒê∆°n h√†ng c·ªßa vendor)
CREATE TABLE vendor_orders (
  id SERIAL PRIMARY KEY,
  vendor_id INT REFERENCES vendors(id),
  order_id VARCHAR NOT NULL, -- Link ƒë·∫øn orders ch√≠nh
  
  -- Masked customer info (l∆∞u s·∫µn ƒë·ªÉ kh√¥ng ph·∫£i mask real-time)
  masked_customer_name VARCHAR,
  masked_customer_phone VARCHAR,
  masked_customer_address TEXT,
  
  -- Shipping info
  shipping_provider VARCHAR, -- 'ghn', 'ghtk', 'vnpost'
  shipping_code VARCHAR UNIQUE, -- M√£ v·∫≠n ƒë∆°n
  shipping_label_url TEXT, -- URL tem shipping (PDF/image)
  
  -- Financial
  cod_amount DECIMAL(12,2),
  vendor_cost DECIMAL(12,2), -- Gi√° v·ªën vendor
  commission_amount DECIMAL(12,2), -- Commission shop nh·∫≠n
  deposit_deducted BOOLEAN DEFAULT false,
  
  -- Status tracking
  status VARCHAR DEFAULT 'pending_pickup', 
  -- pending_pickup/confirmed/shipped/in_transit/delivered/cancelled
  
  packed_at TIMESTAMP,
  picked_up_at TIMESTAMP,
  shipped_at TIMESTAMP,
  delivered_at TIMESTAMP,
  
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
-- 4. Consignment Requests (Y√™u c·∫ßu k√Ω g·ª≠i)
CREATE TABLE consignment_requests (
  id SERIAL PRIMARY KEY,
  vendor_id INT REFERENCES vendors(id),
  
  product_name VARCHAR NOT NULL,
  quantity INT NOT NULL,
  proposed_price DECIMAL(12,2) NOT NULL,
  discount_percent DECIMAL(3,2) DEFAULT 0,
  notes TEXT,
  
  status VARCHAR DEFAULT 'pending', -- pending/approved/rejected
  
  reviewed_by INT, -- Admin user ID
  reviewed_at TIMESTAMP,
  rejection_reason TEXT,
  
  created_at TIMESTAMP DEFAULT NOW()
);
-- 5. Deposit Transactions (Giao d·ªãch k√Ω qu·ªπ)
CREATE TABLE deposit_transactions (
  id SERIAL PRIMARY KEY,
  vendor_id INT REFERENCES vendors(id),
  
  type VARCHAR NOT NULL, -- 'deposit', 'deduction', 'refund'
  amount DECIMAL(12,2) NOT NULL,
  
  order_id VARCHAR, -- N·∫øu type='deduction'
  
  balance_before DECIMAL(12,2),
  balance_after DECIMAL(12,2),
  
  proof_url TEXT, -- Screenshot chuy·ªÉn kho·∫£n (n·∫øu deposit)
  description TEXT,
  
  created_at TIMESTAMP DEFAULT NOW()
);
-- 6. Return Requests (Y√™u c·∫ßu ho√†n h√†ng)
CREATE TABLE return_requests (
  id SERIAL PRIMARY KEY,
  vendor_id INT REFERENCES vendors(id),
  vendor_product_id INT REFERENCES vendor_products(id),
  
  quantity INT NOT NULL,
  reason VARCHAR NOT NULL, -- 'expired', 'not_selling', 'defective', 'other'
  reason_detail TEXT,
  
  status VARCHAR DEFAULT 'pending', -- pending/approved/rejected/completed
  
  pickup_scheduled_at TIMESTAMP,
  picked_up_at TIMESTAMP,
  
  approved_by INT,
  approved_at TIMESTAMP,
  rejection_reason TEXT,
  
  created_at TIMESTAMP DEFAULT NOW()
);
-- Indexes cho performance
CREATE INDEX idx_vendor_products_vendor ON vendor_products(vendor_id);
CREATE INDEX idx_vendor_orders_vendor ON vendor_orders(vendor_id);
CREATE INDEX idx_vendor_orders_status ON vendor_orders(status);
CREATE INDEX idx_deposit_transactions_vendor ON deposit_transactions(vendor_id);
CREATE INDEX idx_return_requests_vendor ON return_requests(vendor_id);
üîå 2. API ENDPOINTS
Authentication:
POST   /api/vendor/auth/login
POST   /api/vendor/auth/register (n·∫øu cho ph√©p t·ª± ƒëƒÉng k√Ω)
POST   /api/vendor/auth/logout
GET    /api/vendor/auth/me
Dashboard:
GET    /api/vendor/dashboard/stats
Response: {
  newOrders: number,
  inTransit: number,
  delivered: number,
  revenue: number,
  depositBalance: number,
  recentOrders: Order[],
  recentTransactions: Transaction[],
  lowStockProducts: Product[]
}
Products:
GET    /api/vendor/products?status=&search=
GET    /api/vendor/products/:id
PUT    /api/vendor/products/:id/quantity
Consignment:
POST   /api/vendor/consignment
GET    /api/vendor/consignment/requests
DELETE /api/vendor/consignment/:id  (cancel request)
Orders:
GET    /api/vendor/orders?status=&carrier=&dateFrom=&dateTo=&page=
GET    /api/vendor/orders/:id
POST   /api/vendor/orders/:id/mark-packed
POST   /api/vendor/orders/:id/call-shipper
GET    /api/vendor/orders/:id/shipping-label
Financial:
GET    /api/vendor/financial/balance
GET    /api/vendor/financial/transactions?type=&dateFrom=&dateTo=&page=
POST   /api/vendor/financial/deposit
  Body: { amount: number, proof_url: string }
Returns:
GET    /api/vendor/returns?status=&page=
POST   /api/vendor/returns
  Body: { vendor_product_id, quantity, reason, reason_detail }
GET    /api/vendor/returns/:id
DELETE /api/vendor/returns/:id  (cancel if pending)
Settings:
GET    /api/vendor/settings
PUT    /api/vendor/profile
PUT    /api/vendor/warehouse
PUT    /api/vendor/payment-settings
PUT    /api/vendor/notifications
POST   /api/vendor/change-password
üöö 3. SHIPPING INTEGRATION (Quan tr·ªçng!)
GHN (Giao H√†ng Nhanh) API:
// Setup
const GHN_TOKEN = process.env.GHN_TOKEN;
const GHN_SHOP_ID = process.env.GHN_SHOP_ID;
const BASE_URL = 'https://online-gateway.ghn.vn/shiip/public-api/v2';
// 1. T·∫°o ƒë∆°n v·∫≠n chuy·ªÉn
async function createGHNOrder(vendorOrder, vendor, customer) {
  const response = await fetch(`${BASE_URL}/shipping-order/create`, {
    method: 'POST',
    headers: {
      'Token': GHN_TOKEN,
      'ShopId': GHN_SHOP_ID,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      payment_type_id: 2, // COD v·ªÅ shop
      to_name: maskName(customer.name),
      to_phone: maskPhone(customer.phone),
      to_address: customer.address,
      to_ward_code: customer.ward_code,
      to_district_id: customer.district_id,
      
      // Pickup t·ª´ kho vendor
      from_ward_code: vendor.warehouse_ward,
      from_district_id: vendor.warehouse_district,
      
      cod_amount: vendorOrder.cod_amount,
      content: "S·∫£n ph·∫©m t√¢m linh",
      weight: 500, // gram
      
      items: [{
        name: vendorOrder.product_name,
        quantity: vendorOrder.quantity,
        price: vendorOrder.cod_amount
      }]
    })
  });
  
  const data = await response.json();
  
  // L∆∞u tracking code v√† label URL
  return {
    shipping_code: data.data.order_code,
    shipping_label_url: `${BASE_URL}/a5/gen-token?token=${data.data.token}`
  };
}
// 2. Webhook nh·∫≠n update t·ª´ GHN
POST /webhooks/ghn
Body: {
  OrderCode: string,
  Status: string, // "ready_to_pick", "picking", "delivered", etc.
  CODTransferDate: string
}
// Khi Status = "delivered" v√† CODTransferDate c√≥ gi√° tr·ªã
// ‚Üí Trigger auto-deduct deposit
GHTK API (t∆∞∆°ng t·ª±):
// Base: https://services.giaohangtietkiem.vn/services
// Token: process.env.GHTK_TOKEN
üí∞ 4. BUSINESS LOGIC QUAN TR·ªåNG
Masking Functions (Server-side):
// utils/masking.js
function maskCustomerName(fullName) {
  const parts = fullName.split(' ');
  if (parts.length === 1) return parts[0].charAt(0) + '**';
  
  // "Nguy·ªÖn VƒÉn An" ‚Üí "Nguy·ªÖn V** A**"
  return parts.map((part, i) => {
    if (i === 0) return part; // H·ªç gi·ªØ nguy√™n
    return part.charAt(0) + '**';
  }).join(' ');
}
function maskPhone(phone) {
  // "0987654321" ‚Üí "098***4321"
  return phone.substring(0, 3) + '***' + phone.substring(7);
}
function maskAddress(address) {
  // "456 Nguy·ªÖn Hu·ªá, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP.HCM"
  // ‚Üí "456 Nguy·ªÖn Hu·ªá, Ph∆∞·ªùng.**, Qu·∫≠n.**, TP.HCM.**"
  const parts = address.split(',');
  return parts.map((part, i) => {
    if (i === 0) return part; // S·ªë nh√† v√† ƒë∆∞·ªùng gi·ªØ nguy√™n
    return part.split(' ')[0] + '.**';
  }).join(',');
}
Auto-Deduct Deposit Logic:
// Khi order delivered v√† COD v·ªÅ shop
async function handleCODCollected(vendorOrder) {
  const vendor = await getVendor(vendorOrder.vendor_id);
  
  if (vendor.payment_method === 'deposit') {
    const deductAmount = vendorOrder.vendor_cost;
    
    // Check balance
    if (vendor.deposit_balance < deductAmount) {
      await notifyVendor(vendor, 'LOW_BALANCE');
      await notifyAdmin('Vendor balance insufficient');
      return;
    }
    
    // Deduct
    await db.transaction(async (trx) => {
      // Update balance
      await trx('vendors')
        .where('id', vendor.id)
        .decrement('deposit_balance', deductAmount);
      
      // Log transaction
      await trx('deposit_transactions').insert({
        vendor_id: vendor.id,
        type: 'deduction',
        amount: -deductAmount,
        order_id: vendorOrder.order_id,
        balance_before: vendor.deposit_balance,
        balance_after: vendor.deposit_balance - deductAmount,
        description: `COD collected for order ${vendorOrder.order_id}`
      });
      
      // Mark order as deducted
      await trx('vendor_orders')
        .where('id', vendorOrder.id)
        .update({ deposit_deducted: true });
    });
    
    // Check if balance low
    const newBalance = vendor.deposit_balance - deductAmount;
    if (newBalance < vendor.minimum_deposit) {
      await notifyVendor(vendor, 'LOW_BALANCE_WARNING');
    }
  }
}
Order Assignment to Vendor:
// Khi order ƒë∆∞·ª£c t·∫°o, assign cho vendor c√≥ s·∫£n ph·∫©m
async function createOrderForVendor(order, orderItem) {
  // Find vendor for this product
  const vendorProduct = await db('vendor_products')
    .where('product_id', orderItem.product_id)
    .where('status', 'active')
    .first();
  
  if (!vendorProduct) {
    throw new Error('Product not available from any vendor');
  }
  
  const vendor = await getVendor(vendorProduct.vendor_id);
  const customer = await getCustomer(order.customer_id);
  
  // Create vendor order v·ªõi masked info
  const vendorOrder = await db('vendor_orders').insert({
    vendor_id: vendor.id,
    order_id: order.id,
    
    masked_customer_name: maskCustomerName(customer.name),
    masked_customer_phone: maskPhone(customer.phone),
    masked_customer_address: maskAddress(customer.address),
    
    cod_amount: order.total,
    vendor_cost: vendorProduct.consignment_price * orderItem.quantity,
    commission_amount: (order.total - vendorProduct.consignment_price * orderItem.quantity),
    
    status: 'pending_pickup'
  });
  
  // Create shipping order v·ªõi GHN/GHTK
  const shippingInfo = await createGHNOrder(vendorOrder, vendor, customer);
  
  // Update v·ªõi shipping info
  await db('vendor_orders')
    .where('id', vendorOrder.id)
    .update({
      shipping_provider: 'ghn',
      shipping_code: shippingInfo.shipping_code,
      shipping_label_url: shippingInfo.shipping_label_url
    });
  
  // Update inventory
  await db('vendor_products')
    .where('id', vendorProduct.id)
    .decrement('quantity_consigned', orderItem.quantity);
  
  // Notify vendor
  await notifyVendor(vendor, 'NEW_ORDER', vendorOrder);
}
üîê 5. AUTHENTICATION & AUTHORIZATION
// Middleware
async function requireVendorAuth(req, res, next) {
  if (!req.session.vendorId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  const vendor = await db('vendors')
    .where('id', req.session.vendorId)
    .first();
  
  if (!vendor || vendor.status !== 'active') {
    return res.status(403).json({ error: 'Vendor account inactive' });
  }
  
  req.vendor = vendor;
  next();
}
// Apply to all vendor routes
app.use('/api/vendor/*', requireVendorAuth);
üìß 6. NOTIFICATIONS & WEBHOOKS
Notifications vendor c·∫ßn nh·∫≠n:
ƒê∆°n h√†ng m·ªõi ‚Üí Email/SMS
K√Ω qu·ªπ s·∫Øp h·∫øt ‚Üí Email
Consignment request ƒë∆∞·ª£c approve/reject ‚Üí Email
Return request ƒë∆∞·ª£c approve ‚Üí Email
Order delivered (COD collected) ‚Üí Email
Webhooks c·∫ßn implement:
GHN/GHTK webhook ‚Üí Update order status
Payment webhook (n·∫øu c√≥ auto bank transfer) ‚Üí Update deposit balance
üéØ 7. PRIORITY ORDER (Th·ª© t·ª± ∆∞u ti√™n)
Phase 1: Core (C·∫ßn g·∫•p):

‚úÖ Database schema setup
‚úÖ Vendor authentication
‚úÖ Masking functions
‚úÖ Dashboard stats API
‚úÖ Products list API
‚úÖ Orders list API (with masked data)
Phase 2: Shipping (Quan tr·ªçng):
7. ‚úÖ GHN API integration

‚úÖ Create shipping order logic
‚úÖ Print shipping label API
‚úÖ Webhook from GHN
Phase 3: Financial (K√Ω qu·ªπ):
11. ‚úÖ Deposit balance tracking

‚úÖ Auto-deduct logic
‚úÖ Transaction history
‚úÖ Deposit request workflow
Phase 4: Advanced:
15. ‚úÖ Consignment approval workflow

‚úÖ Return requests
‚úÖ Settings management
‚úÖ Notifications
T√≥m l·∫°i: B·∫°n c·∫ßn l√†m Database (6 tables) + API endpoints (~30 routes) + Shipping integration (GHN/GHTK) + Business logic (masking, auto-deduct).