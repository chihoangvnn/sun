import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useState } from 'react';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Share, MessageCircle, Phone, Mail, Facebook, Copy, Users, Gift, Ticket } from 'lucide-react';
import { Link } from 'wouter';
import QuickContact from '@/components/QuickContact';
import SocialLoginPanel from '@/components/SocialLoginPanel';
import SocialShare from '@/components/SocialShare';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
// Using browser alert for toast notifications (can be upgraded to toast library later)
const toast = {
  success: (message: string) => alert(`‚úÖ ${message}`),
  error: (message: string) => alert(`‚ùå ${message}`)
};

// API Types
interface MembershipTier {
  name: string;
  nameEn: string;
  color: string;
  requiredSpent: number;
  pointsMultiplier: number;
  benefits: string[];
  icon: string;
  key: string;
  isActive?: boolean;
  isUnlocked?: boolean;
  remainingSpent?: number;
  progressPercent?: number;
}

interface Customer {
  id: string;
  name: string;
  email: string;
  membershipTier: string;
  totalSpent: number;
  pointsBalance: number;
  pointsEarned: number;
  lastTierUpdate: string;
  joinDate: string;
  // Business Management Fields
  totalDebt?: number;
  creditLimit?: number;
  phone?: string;
}

interface MembershipDashboard {
  customer: Customer;
  currentTier: MembershipTier;
  nextTier: MembershipTier | null;
  points: {
    balance: number;
    earned: number;
    valueVND: number;
    minRedemption: number;
  };
  allTiers: MembershipTier[];
}

const formatVND = (amount: number) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(amount);
};

const formatNumber = (num: number) => {
  return new Intl.NumberFormat('vi-VN').format(num);
};

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('vi-VN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

export default function MemberProfile() {
  const queryClient = useQueryClient();
  const [pointsToRedeem, setPointsToRedeem] = useState<number>(0);
  const [orderTotal, setOrderTotal] = useState<number>(0);

  // Fetch membership dashboard data
  const { data: dashboard, isLoading, error } = useQuery<MembershipDashboard>({
    queryKey: ['membership', 'dashboard'],
    queryFn: async () => {
      const response = await fetch('/api/membership/dashboard', {
        credentials: 'include',
      });
      if (!response.ok) {
        throw new Error('Failed to fetch membership data');
      }
      return response.json();
    },
  });

  // Redeem points mutation
  const redeemPointsMutation = useMutation({
    mutationFn: async (data: { pointsToRedeem: number; orderTotal: number }) => {
      const response = await fetch('/api/membership/redeem-points', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(data),
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to redeem points');
      }
      return response.json();
    },
    onSuccess: (data) => {
      toast.success(`ƒê√£ quy ƒë·ªïi ${formatNumber(data.pointsRedeemed)} ƒëi·ªÉm th√†nh ${formatVND(data.discountValue)}!`);
      queryClient.invalidateQueries({ queryKey: ['membership'] });
      setPointsToRedeem(0);
      setOrderTotal(0);
    },
    onError: (error: Error) => {
      toast.error(error.message);
    },
  });

  if (isLoading) {
    return (
      <div className="container mx-auto p-4 space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="grid gap-6 md:grid-cols-2">
            <div className="h-48 bg-gray-200 rounded"></div>
            <div className="h-48 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  // Demo data fallback for testing UI
  const demoData = {
    customer: {
      id: 'demo-customer-001',
      name: 'Nguy·ªÖn VƒÉn A', 
      email: 'customer@nhangxanh.vn',
      membershipTier: 'gold',
      totalSpent: 5500000, // 5.5M VND - Gold tier
      pointsBalance: 2750,
      pointsEarned: 5500,
      totalDebt: 150000, // Has some debt  
      creditLimit: 2000000, // 2M credit limit
      joinDate: '2024-01-15',
      lastTierUpdate: '2024-09-01'
    },
    currentTier: {
      id: 'gold',
      name: 'V√†ng',
      nameEn: 'gold',
      color: '#FFD700',
      requiredSpent: 5000000,
      pointsMultiplier: 1.5,
      benefits: ['T√≠ch ƒëi·ªÉm x1.5', 'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn', '∆Øu ti√™n h·ªó tr·ª£'],
      icon: 'ü•á',
      key: 'gold',
      isActive: true,
      isUnlocked: true
    },
    nextTier: {
      id: 'diamond',
      name: 'Kim C∆∞∆°ng',
      nameEn: 'diamond',
      color: '#E0E7FF',
      requiredSpent: 15000000,
      pointsMultiplier: 2.0,
      benefits: ['T√≠ch ƒëi·ªÉm x2.0', 'Qu√† t·∫∑ng sinh nh·∫≠t', 'T∆∞ v·∫•n 1:1'],
      icon: 'üíé',
      key: 'diamond',
      isActive: false,
      remainingSpent: 9500000,
      progressPercent: 58
    },
    points: {
      balance: 2750,
      earned: 5500,
      valueVND: 275000,
      minRedemption: 100
    },
    allTiers: []
  };

  if (error || !dashboard) {
    console.log('Using demo data for testing UI');
  }

  const { customer, currentTier, nextTier, points, allTiers } = dashboard || demoData;

  return (
    <div className="container mx-auto p-4 space-y-6 bg-gradient-to-br from-orange-50 via-red-50 to-amber-50 min-h-screen">
      {/* Header with Social Integration */}
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent">
          Th√¥ng Tin Th√†nh Vi√™n
        </h1>
        <p className="text-gray-600">Qu·∫£n l√Ω th√¥ng tin v√† quy·ªÅn l·ª£i th√†nh vi√™n nhang s·∫°ch</p>
        
        {/* Quick Actions */}
        <div className="flex justify-center gap-3">
          <Link href="/member/vouchers">
            <Button className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white">
              <Ticket className="w-4 h-4 mr-2" />
              M√£ Gi·∫£m Gi√° C·ªßa T√¥i
            </Button>
          </Link>
        </div>
        
        {/* Social Achievement Banner */}
        <div className="bg-gradient-to-r from-orange-100 to-red-100 rounded-xl p-4 border border-orange-200">
          <div className="flex items-center justify-center gap-2 text-orange-700">
            <span className="text-2xl">{currentTier.icon}</span>
            <div className="text-center">
              <div className="font-bold">üéâ Th√†nh t√≠ch ƒë√°ng t·ª± h√†o!</div>
              <div className="text-sm">B·∫°n ƒë√£ ƒë·∫°t h·∫°ng {currentTier.name} v·ªõi {formatVND(customer.totalSpent)} chi ti√™u</div>
            </div>
            <Button 
              variant="outline" 
              size="sm" 
              className="bg-white/80 hover:bg-white border-orange-300"
              onClick={() => {
                const achievementText = `üî• T√¥i v·ª´a ƒë·∫°t h·∫°ng ${currentTier.name} t·∫°i nhang s·∫°ch v·ªõi ${formatVND(customer.totalSpent)} chi ti√™u! ${formatNumber(points.balance)} ƒëi·ªÉm th∆∞·ªüng ƒëang ch·ªù s·ª≠ d·ª•ng! üåü #nhangxanh #thanhvien${currentTier.nameEn}`;
                if (navigator.share) {
                  navigator.share({ 
                    text: achievementText, 
                    url: window.location.href,
                    title: 'Th√†nh t√≠ch th√†nh vi√™n nhang s·∫°ch'
                  });
                } else {
                  navigator.clipboard.writeText(achievementText);
                  toast.success('ƒê√£ copy th√†nh t√≠ch ƒë·ªÉ chia s·∫ª!');
                }
              }}
            >
              <Share className="w-4 h-4 mr-1" />
              Khoe th√†nh t√≠ch
            </Button>
          </div>
        </div>
      </div>

      {/* Current Status Overview */}
      <div className="grid gap-6 md:grid-cols-2">
        {/* Member Information */}
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader className="text-center space-y-4">
            <div className="mx-auto w-20 h-20 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center text-3xl">
              {currentTier.icon}
            </div>
            <div>
              <CardTitle className="text-2xl" style={{ color: currentTier.color }}>
                {customer.name}
              </CardTitle>
              <CardDescription className="text-lg">
                Th√†nh vi√™n {currentTier.name}
              </CardDescription>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">Email:</span>
                <span className="font-medium">{customer.email}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Ng√†y tham gia:</span>
                <span className="font-medium">{formatDate(customer.joinDate)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">T·ªïng chi ti√™u:</span>
                <span className="font-bold text-green-600">{formatVND(customer.totalSpent)}</span>
              </div>
            </div>
            
            {/* Social Actions */}
            <div className="pt-4 border-t">
              <div className="grid grid-cols-2 gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="flex items-center gap-2 text-xs"
                  onClick={() => {
                    const text = `üéâ T√¥i l√† th√†nh vi√™n ${currentTier.name} t·∫°i nhang s·∫°ch! T·ªïng chi ti√™u ${formatVND(customer.totalSpent)} v·ªõi ${formatNumber(points.balance)} ƒëi·ªÉm th∆∞·ªüng! üî•`;
                    if (navigator.share) {
                      navigator.share({ text, url: window.location.href });
                    } else {
                      navigator.clipboard.writeText(text);
                      toast.success('ƒê√£ copy th√†nh t√≠ch!');
                    }
                  }}
                >
                  <Share className="w-3 h-3" />
                  Chia s·∫ª
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="flex items-center gap-2 text-xs"
                  onClick={() => {
                    const referralCode = `REF${customer.id.slice(-6).toUpperCase()}`;
                    const text = `M√£ gi·ªõi thi·ªáu: ${referralCode}`;
                    navigator.clipboard.writeText(text);
                    toast.success('ƒê√£ copy m√£ gi·ªõi thi·ªáu!');
                  }}
                >
                  <Users className="w-3 h-3" />
                  Gi·ªõi thi·ªáu
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Points Balance v·ªõi Social Features */}
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-2xl">üéÅ</span>
                ƒêi·ªÉm Th∆∞·ªüng
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="text-blue-600 hover:text-blue-700 p-1"
                  onClick={() => {
                    const referralCode = `REF${customer.id.slice(-6).toUpperCase()}`;
                    const referralText = `üéÅ Tham gia nhang s·∫°ch v·ªõi m√£ gi·ªõi thi·ªáu ${referralCode} ƒë·ªÉ nh·∫≠n 500 ƒëi·ªÉm th∆∞·ªüng mi·ªÖn ph√≠! Link: ${window.location.origin}/member-profile?ref=${referralCode}`;
                    navigator.clipboard.writeText(referralText);
                    toast.success('ƒê√£ copy link gi·ªõi thi·ªáu b·∫°n b√®!');
                  }}
                  title="Gi·ªõi thi·ªáu b·∫°n b√®"
                >
                  <Users className="w-4 h-4" />
                </Button>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="text-green-600 hover:text-green-700 p-1"
                  onClick={() => {
                    const pointsText = `üí∞ T√¥i c√≥ ${formatNumber(points.balance)} ƒëi·ªÉm th∆∞·ªüng (${formatVND(points.valueVND)}) t·∫°i nhang s·∫°ch! ƒê·ªß mua nhi·ªÅu s·∫£n ph·∫©m tuy·ªát v·ªùi! üõí`;
                    if (navigator.share) {
                      navigator.share({ text: pointsText });
                    } else {
                      navigator.clipboard.writeText(pointsText);
                      toast.success('ƒê√£ copy th√¥ng tin ƒëi·ªÉm!');
                    }
                  }}
                  title="Chia s·∫ª ƒëi·ªÉm th∆∞·ªüng"
                >
                  <Gift className="w-4 h-4" />
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-center space-y-2">
              <div className="text-4xl font-bold text-orange-600">
                {formatNumber(points.balance)}
              </div>
              <div className="text-gray-600">
                T∆∞∆°ng ƒë∆∞∆°ng {formatVND(points.valueVND)}
              </div>
            </div>
            <Separator />
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>T·ªïng ƒëi·ªÉm ƒë√£ t√≠ch l≈©y:</span>
                <span className="font-medium">{formatNumber(points.earned)}</span>
              </div>
              <div className="flex justify-between">
                <span>T√≠ch ƒëi·ªÉm x{currentTier.pointsMultiplier}:</span>
                <Badge style={{ backgroundColor: currentTier.color }}>
                  {currentTier.name}
                </Badge>
              </div>
              <div className="mt-3 p-2 bg-blue-50 rounded text-xs text-blue-700">
                üí° <strong>M·∫πo:</strong> Gi·ªõi thi·ªáu b·∫°n b√® v√† c·∫£ hai ƒë·ªÅu nh·∫≠n 500 ƒëi·ªÉm th∆∞·ªüng!
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tier Progress */}
      {nextTier && (
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <span className="text-2xl">üìà</span>
              Ti·∫øn ƒê·ªô ThƒÉng H·∫°ng
            </CardTitle>
            <CardDescription>
              C√≤n {formatVND(nextTier.remainingSpent || 0)} ƒë·ªÉ thƒÉng h·∫°ng {nextTier.name}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-4">
              <div className="text-2xl">{currentTier.icon}</div>
              <div className="flex-1">
                <Progress value={nextTier.progressPercent || 0} className="h-3" />
              </div>
              <div className="text-2xl">{nextTier.icon}</div>
            </div>
            <div className="flex justify-between text-sm text-gray-600">
              <span>{currentTier.name}</span>
              <span>{Math.round(nextTier.progressPercent || 0)}%</span>
              <span>{nextTier.name}</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Business Management Section */}
      <div className="grid gap-6 md:grid-cols-2">
        {/* Debt Management Card */}
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-2xl">üí∞</span>
                Qu·∫£n L√Ω C√¥ng N·ª£
              </div>
              <Badge variant={Number(customer.totalDebt || 0) > 0 ? "destructive" : "default"}>
                {Number(customer.totalDebt || 0) > 0 ? "C√≥ n·ª£" : "Kh√¥ng n·ª£"}
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-center space-y-2">
              <div className="text-3xl font-bold text-red-600">
                {formatVND(Number(customer.totalDebt || 0))}
              </div>
              <div className="text-gray-600 text-sm">
                T·ªïng c√¥ng n·ª£ hi·ªán t·∫°i
              </div>
            </div>
            
            {Number(customer.totalDebt || 0) > 0 && (
              <>
                <Separator />
                <div className="space-y-3">
                  <div className="text-sm text-gray-600">
                    üí° <strong>L∆∞u √Ω:</strong> Vui l√≤ng thanh to√°n c√¥ng n·ª£ ƒë·ªÉ ti·∫øp t·ª•c mua h√†ng
                  </div>
                  <div className="grid gap-2">
                    <Button className="w-full bg-green-600 hover:bg-green-700 text-white">
                      üí≥ Thanh to√°n ngay
                    </Button>
                    <Button variant="outline" className="w-full">
                      üìû Li√™n h·ªá h·ªó tr·ª£
                    </Button>
                  </div>
                </div>
              </>
            )}
            
            {Number(customer.totalDebt || 0) === 0 && (
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <div className="text-green-700 font-medium">‚úÖ Kh√¥ng c√≥ c√¥ng n·ª£</div>
                <div className="text-green-600 text-sm">B·∫°n c√≥ th·ªÉ mua h√†ng b√¨nh th∆∞·ªùng</div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Credit Limit Card */}
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-2xl">üí≥</span>
                H·∫°n M·ª©c T√≠n D·ª•ng
              </div>
              <Badge variant={Number(customer.creditLimit || 0) > 0 ? "default" : "secondary"}>
                {Number(customer.creditLimit || 0) > 0 ? "C√≥ h·∫°n m·ª©c" : "Ch∆∞a c√≥"}
              </Badge>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-center space-y-2">
              <div className="text-3xl font-bold text-blue-600">
                {formatVND(Number(customer.creditLimit || 0))}
              </div>
              <div className="text-gray-600 text-sm">
                H·∫°n m·ª©c t√≠n d·ª•ng ƒë∆∞·ª£c ph√©p
              </div>
            </div>
            
            {Number(customer.creditLimit || 0) > 0 && (
              <>
                <Separator />
                <div className="space-y-3">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>ƒê√£ s·ª≠ d·ª•ng:</span>
                      <span className="font-medium text-red-600">
                        {formatVND(Number(customer.totalDebt || 0))}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>C√≤n l·∫°i:</span>
                      <span className="font-medium text-green-600">
                        {formatVND(Number(customer.creditLimit || 0) - Number(customer.totalDebt || 0))}
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className="bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all"
                        style={{
                          width: `${Math.min(100, (Number(customer.totalDebt || 0) / Number(customer.creditLimit || 0)) * 100)}%`
                        }}
                      />
                    </div>
                    <div className="text-xs text-gray-500 text-center">
                      S·ª≠ d·ª•ng {Math.round((Number(customer.totalDebt || 0) / Number(customer.creditLimit || 0)) * 100)}% h·∫°n m·ª©c
                    </div>
                  </div>
                </div>
              </>
            )}
            
            {Number(customer.creditLimit || 0) === 0 && (
              <div className="text-center p-3 bg-blue-50 rounded-lg">
                <div className="text-blue-700 font-medium">üìã Ch∆∞a c√≥ h·∫°n m·ª©c</div>
                <div className="text-blue-600 text-sm">Li√™n h·ªá ƒë·ªÉ ƒëƒÉng k√Ω h·∫°n m·ª©c t√≠n d·ª•ng</div>
                <Button variant="outline" className="mt-2 w-full">
                  üìû Y√™u c·∫ßu h·∫°n m·ª©c
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Points Redemption */}
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span className="text-2xl">üéÅ</span>
            Quy ƒê·ªïi ƒêi·ªÉm Th∆∞·ªüng
          </CardTitle>
          <CardDescription>
            S·ª≠ d·ª•ng ƒëi·ªÉm ƒë·ªÉ gi·∫£m gi√° ƒë∆°n h√†ng (1 ƒëi·ªÉm = 100 VND)
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="orderTotal">T·ªïng ƒë∆°n h√†ng (VND)</Label>
              <Input
                id="orderTotal"
                type="number"
                value={orderTotal}
                onChange={(e) => setOrderTotal(Number(e.target.value))}
                placeholder="Nh·∫≠p t·ªïng gi√° tr·ªã ƒë∆°n h√†ng"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="pointsToRedeem">ƒêi·ªÉm quy ƒë·ªïi</Label>
              <Input
                id="pointsToRedeem"
                type="number"
                value={pointsToRedeem}
                onChange={(e) => setPointsToRedeem(Number(e.target.value))}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªÉm mu·ªën quy ƒë·ªïi"
                max={Math.min(points.balance, Math.floor((orderTotal || 0) * 0.5 / 100))}
              />
            </div>
          </div>
          
          {pointsToRedeem > 0 && orderTotal > 0 && (
            <div className="p-4 bg-orange-50 rounded-lg space-y-2">
              <div className="flex justify-between">
                <span>ƒêi·ªÉm quy ƒë·ªïi:</span>
                <span className="font-medium">{formatNumber(pointsToRedeem)} ƒëi·ªÉm</span>
              </div>
              <div className="flex justify-between">
                <span>Gi√° tr·ªã gi·∫£m:</span>
                <span className="font-medium text-green-600">-{formatVND(pointsToRedeem * 100)}</span>
              </div>
              <div className="flex justify-between font-bold">
                <span>S·ªë ti·ªÅn ph·∫£i tr·∫£:</span>
                <span className="text-orange-600">{formatVND(orderTotal - (pointsToRedeem * 100))}</span>
              </div>
            </div>
          )}

          <Button
            onClick={() => redeemPointsMutation.mutate({ pointsToRedeem, orderTotal })}
            disabled={!pointsToRedeem || !orderTotal || pointsToRedeem > points.balance || redeemPointsMutation.isPending}
            className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600"
          >
            {redeemPointsMutation.isPending ? 'ƒêang x·ª≠ l√Ω...' : 'Quy ƒê·ªïi ƒêi·ªÉm'}
          </Button>
        </CardContent>
      </Card>

      {/* Spending Analytics Dashboard */}
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span className="text-2xl">üìä</span>
            Ph√¢n T√≠ch Chi Ti√™u
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Analytics Summary Cards */}
          <div className="grid gap-4 md:grid-cols-3">
            <div className="p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg border border-blue-200">
              <div className="text-center space-y-1">
                <div className="text-2xl font-bold text-blue-600">
                  {formatVND(customer.totalSpent)}
                </div>
                <div className="text-blue-700 text-sm font-medium">T·ªïng Chi Ti√™u</div>
                <div className="text-blue-600 text-xs">T·ª´ {formatDate(customer.joinDate)}</div>
              </div>
            </div>
            
            <div className="p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-lg border border-green-200">
              <div className="text-center space-y-1">
                <div className="text-2xl font-bold text-green-600">
                  {Math.round(customer.totalSpent / 12).toLocaleString('vi-VN')}ƒë
                </div>
                <div className="text-green-700 text-sm font-medium">TB/Th√°ng</div>
                <div className="text-green-600 text-xs">12 th√°ng qua</div>
              </div>
            </div>
            
            <div className="p-4 bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg border border-purple-200">
              <div className="text-center space-y-1">
                <div className="text-2xl font-bold text-purple-600">
                  {currentTier.pointsMultiplier}x
                </div>
                <div className="text-purple-700 text-sm font-medium">H·ªá S·ªë ƒêi·ªÉm</div>
                <div className="text-purple-600 text-xs">H·∫°ng {currentTier.name}</div>
              </div>
            </div>
          </div>

          {/* Spending Trends Chart */}
          <div className="space-y-4">
            <h4 className="font-semibold text-gray-800">üìà Xu H∆∞·ªõng Chi Ti√™u (6 th√°ng qua)</h4>
            <div className="h-64 bg-gray-50 rounded-lg p-4 border border-gray-200">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart
                  data={[
                    { month: 'T4', spending: 800000, label: 'Th√°ng 4' },
                    { month: 'T5', spending: 1200000, label: 'Th√°ng 5' },
                    { month: 'T6', spending: 950000, label: 'Th√°ng 6' },
                    { month: 'T7', spending: 1500000, label: 'Th√°ng 7' },
                    { month: 'T8', spending: 1100000, label: 'Th√°ng 8' },
                    { month: 'T9', spending: 950000, label: 'Th√°ng 9' }
                  ]}
                  margin={{ top: 20, right: 30, left: 20, bottom: 20 }}
                >
                  <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                  <XAxis 
                    dataKey="month" 
                    tick={{ fontSize: 12, fill: '#666' }}
                    axisLine={{ stroke: '#e0e0e0' }}
                  />
                  <YAxis 
                    tick={{ fontSize: 12, fill: '#666' }}
                    axisLine={{ stroke: '#e0e0e0' }}
                    tickFormatter={(value) => `${(value/1000).toFixed(0)}K`}
                  />
                  <Tooltip 
                    formatter={(value: any) => [formatVND(value), 'Chi ti√™u']}
                    labelFormatter={(label) => `Th√°ng ${label.replace('T', '')}/2024`}
                    contentStyle={{ 
                      backgroundColor: '#fff', 
                      border: '1px solid #e0e0e0',
                      borderRadius: '8px',
                      fontSize: '14px'
                    }}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="spending" 
                    stroke="#f97316" 
                    strokeWidth={3}
                    dot={{ fill: '#f97316', strokeWidth: 2, r: 5 }}
                    activeDot={{ r: 7, stroke: '#f97316', strokeWidth: 2, fill: '#fff' }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* Tier Progress Analytics */}
          <div className="space-y-4">
            <h4 className="font-semibold text-gray-800">üèÜ Ti·∫øn ƒê·ªô ThƒÉng H·∫°ng</h4>
            <div className="grid gap-3">
              <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                <div className="flex items-center gap-2">
                  <span className="text-lg">ü•à</span>
                  <span className="font-medium text-yellow-700">B·∫°c ‚Üí V√†ng</span>
                </div>
                <div className="text-right">
                  <div className="text-green-600 font-bold">‚úÖ Ho√†n th√†nh</div>
                  <div className="text-yellow-600 text-xs">ƒê·∫°t 01/09/2024</div>
                </div>
              </div>
              
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-200">
                <div className="flex items-center gap-2">
                  <span className="text-lg">üíé</span>
                  <span className="font-medium text-blue-700">V√†ng ‚Üí Kim C∆∞∆°ng</span>
                </div>
                <div className="text-right">
                  <div className="text-blue-600 font-bold">58% ho√†n th√†nh</div>
                  <div className="text-blue-600 text-xs">C√≤n {formatVND(nextTier?.remainingSpent || 0)}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Monthly Insights */}
          <div className="space-y-4">
            <h4 className="font-semibold text-gray-800">üí° Th√¥ng Tin Chi Ti√™u</h4>
            <div className="grid gap-3">
              <div className="p-3 bg-orange-50 rounded-lg border border-orange-200">
                <div className="flex items-start gap-2">
                  <span className="text-orange-600">üìÖ</span>
                  <div>
                    <div className="font-medium text-orange-700">Th√°ng N√†y</div>
                    <div className="text-orange-600 text-sm">
                      Chi ti√™u 950K ‚Ä¢ T√≠ch ƒë∆∞·ª£c 142 ƒëi·ªÉm ‚Ä¢ Ti·∫øt ki·ªám 15% so v·ªõi th√°ng tr∆∞·ªõc
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-start gap-2">
                  <span className="text-green-600">üéØ</span>
                  <div>
                    <div className="font-medium text-green-700">G·ª£i √ù</div>
                    <div className="text-green-600 text-sm">
                      Chi th√™m {formatVND(1000000)} trong 3 th√°ng t·ªõi ƒë·ªÉ l√™n h·∫°ng Kim C∆∞∆°ng!
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Social Integration Section */}
      <div className="grid gap-6 md:grid-cols-2">
        <SocialLoginPanel compact={true} showTitle={true} />
        
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-2xl">üéØ</span>
                Chia s·∫ª th√†nh t√≠ch
              </div>
              <SocialShare 
                title={`Th√†nh vi√™n ${currentTier.name} - Nhang S·∫°ch`}
                text={`üéâ T√¥i ƒë√£ ƒë·∫°t h·∫°ng ${currentTier.name} v·ªõi ${formatVND(customer.totalSpent)} chi ti√™u v√† ${formatNumber(points.balance)} ƒëi·ªÉm th∆∞·ªüng t·∫°i nhang s·∫°ch!`}
                hashtags={['nhangxanh', `thanhvien${currentTier.nameEn}`, 'loyalty']}
              />
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="text-sm text-gray-600">
              Khoe th√†nh t√≠ch th√†nh vi√™n c·ªßa b·∫°n v·ªõi b·∫°n b√®!
            </div>
            <div className="grid gap-2">
              <div className="flex justify-between items-center p-2 bg-orange-50 rounded">
                <span className="text-sm">üèÜ H·∫°ng hi·ªán t·∫°i:</span>
                <Badge style={{ backgroundColor: currentTier.color }}>
                  {currentTier.name}
                </Badge>
              </div>
              <div className="flex justify-between items-center p-2 bg-green-50 rounded">
                <span className="text-sm">üí∞ T·ªïng chi ti√™u:</span>
                <span className="font-bold text-green-600">
                  {formatVND(customer.totalSpent)}
                </span>
              </div>
              <div className="flex justify-between items-center p-2 bg-blue-50 rounded">
                <span className="text-sm">‚≠ê ƒêi·ªÉm th∆∞·ªüng:</span>
                <span className="font-bold text-blue-600">
                  {formatNumber(points.balance)} ƒëi·ªÉm
                </span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Membership Tiers */}
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span className="text-2xl">üëë</span>
            C√°c H·∫°ng Th√†nh Vi√™n
          </CardTitle>
          <CardDescription>
            Quy·ªÅn l·ª£i v√† y√™u c·∫ßu cho t·ª´ng h·∫°ng th√†nh vi√™n
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            {allTiers.map((tier) => (
              <div
                key={tier.key}
                className={`p-4 rounded-lg border-2 transition-all ${
                  tier.isActive
                    ? 'border-orange-500 bg-orange-50 shadow-md'
                    : tier.isUnlocked
                    ? 'border-green-300 bg-green-50'
                    : 'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="text-center space-y-2">
                  <div className="text-3xl">{tier.icon}</div>
                  <h3 className="font-bold" style={{ color: tier.color }}>
                    {tier.name}
                  </h3>
                  <p className="text-sm text-gray-600">
                    {tier.requiredSpent === 0
                      ? 'Mi·ªÖn ph√≠'
                      : `T·ª´ ${formatVND(tier.requiredSpent)}`}
                  </p>
                </div>
                
                <Separator className="my-3" />
                
                <div className="space-y-1">
                  {tier.benefits.map((benefit, index) => (
                    <div key={index} className="text-xs text-gray-700 flex items-start gap-1">
                      <span className="text-green-500 mt-0.5">‚Ä¢</span>
                      <span>{benefit}</span>
                    </div>
                  ))}
                </div>

                {tier.isActive && (
                  <Badge className="w-full mt-3 justify-center bg-orange-500">
                    H·∫°ng hi·ªán t·∫°i
                  </Badge>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Quick Contact Floating Component */}
      <QuickContact />
    </div>
  );
}