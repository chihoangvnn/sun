import React, { useState, useRef, useEffect, useCallback } from 'react';
import { X, Plus, Minus, Star, Share2, ShoppingCart, ChevronDown, ChevronUp, Calendar } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ComprehensiveDisplay } from './storefront/EnhancedProductDisplay';

interface Product {
  id: string;
  name: string;
  price: number;
  image?: string;
  category_id: string;
  stock: number;
  short_description?: string;
  status: string;
  description?: string;
  benefits?: string | string[]; // Added benefits field for organic food business
}

interface ProductDetailModalProps {
  product: Product;
  onClose: () => void;
  onAddToCart: (quantity: number) => void;
  onToggleWishlist: () => void;
  isInWishlist: boolean;
}

export function ProductDetailModal({ 
  product, 
  onClose, 
  onAddToCart, 
  onToggleWishlist, 
  isInWishlist 
}: ProductDetailModalProps) {
  const [quantity, setQuantity] = useState(1);
  const [selectedImage, setSelectedImage] = useState(0);
  
  // Sticky button behavior state
  const [showStickyButtons, setShowStickyButtons] = useState(false);
  const actionButtonsRef = useRef<HTMLDivElement>(null);
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  
  // Drag to close functionality
  const drawerRef = useRef<HTMLDivElement>(null);
  const [dragDistance, setDragDistance] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const startY = useRef(0);
  const [reviews, setReviews] = useState<any[]>([]);
  const [reviewsLoading, setReviewsLoading] = useState(true);
  
  // Accordion state management
  const [openAccordions, setOpenAccordions] = useState<{[key: string]: boolean}>({
    description: false,
    ingredients: false,
    usage: false,
    faq: false,
    customDescriptions: false  // Vietnamese incense custom descriptions
  });

  // Use only real product images - no fabricated ones
  const productImages = product.image ? [product.image] : [];

  // Fetch real reviews when modal opens
  // Shared helper to safely parse rating values (string or number) with validation
  const parseRating = (rating: any): number => {
    const numRating = typeof rating === 'string' ? parseFloat(rating) : rating;
    return (typeof numRating === 'number' && !isNaN(numRating) && numRating >= 1 && numRating <= 5) ? numRating : 5;
  };

  React.useEffect(() => {
    const fetchReviews = async () => {
      try {
        setReviewsLoading(true);
        const response = await fetch(`/api/products/${product.id}/reviews`);
        if (response.ok) {
          const reviewData = await response.json();
          setReviews(reviewData || []);
        } else {
          setReviews([]);
        }
      } catch (error) {
        console.error('Failed to fetch reviews:', error);
        setReviews([]);
      } finally {
        setReviewsLoading(false);
      }
    };

    fetchReviews();
  }, [product.id]);

  const averageRating = reviews.length > 0 
    ? reviews.map(review => parseRating(review.rating))
        .reduce((acc, rating) => acc + rating, 0) / reviews.length
    : 0;

  const handleQuantityChange = (change: number) => {
    const newQuantity = quantity + change;
    if (newQuantity >= 1 && newQuantity <= product.stock) {
      setQuantity(newQuantity);
    }
  };

  const handleAddToCart = () => {
    onAddToCart(quantity);
    setQuantity(1); // Reset quantity after adding to cart
  };

  const handleThinhNhang = () => {
    // Special premium purchase action - could be immediate checkout or special blessing option
    onAddToCart(quantity);
    setQuantity(1);
    // TODO: Could trigger special checkout flow or blessing ceremony booking
    console.log('Th·ªânh Nhang (Premium Purchase) initiated');
  };

  // Sticky button scroll detection
  const handleScroll = useCallback(() => {
    const scrollContainer = scrollContainerRef.current;
    const actionButtons = actionButtonsRef.current;
    
    if (!scrollContainer || !actionButtons) return;
    
    const containerRect = scrollContainer.getBoundingClientRect();
    const buttonRect = actionButtons.getBoundingClientRect();
    
    // Show sticky buttons when action buttons are scrolled past view
    const buttonsScrolledPast = buttonRect.bottom < containerRect.top + 100;
    setShowStickyButtons(buttonsScrolledPast);
  }, []);

  // Attach scroll listener to content area
  useEffect(() => {
    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      scrollContainer.addEventListener('scroll', handleScroll);
      return () => scrollContainer.removeEventListener('scroll', handleScroll);
    }
  }, [handleScroll]);

  // Toggle accordion sections
  const toggleAccordion = (section: string) => {
    setOpenAccordions(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  // Drag functionality for mobile drawer
  const handleTouchStart = (e: React.TouchEvent) => {
    startY.current = e.touches[0].clientY;
    setIsDragging(true);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isDragging) return;
    
    const currentY = e.touches[0].clientY;
    const distance = currentY - startY.current;
    
    // Only allow dragging down (positive distance)
    if (distance > 0) {
      setDragDistance(distance);
    }
  };

  const handleTouchEnd = () => {
    if (dragDistance > 150) {
      // Close modal if dragged down more than 150px
      onClose();
    }
    
    setDragDistance(0);
    setIsDragging(false);
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`h-4 w-4 ${
          i < rating ? 'text-yellow-400 fill-current' : 'text-gray-300'
        }`}
      />
    ));
  };

  return (
    <div className="fixed inset-0 z-60 flex items-end">
      {/* Semi-transparent backdrop for better focus */}
      <div className="absolute inset-0 bg-black/20 backdrop-blur-sm" onClick={onClose}></div>
      
      <div 
        ref={drawerRef}
        className="bg-gray-50 w-full h-full relative shadow-2xl transition-transform duration-300 pointer-events-auto flex flex-col"
        style={{
          transform: `translateY(${dragDistance}px)`,
          opacity: isDragging ? Math.max(1 - dragDistance / 300, 0.3) : 1
        }}
        onClick={(e) => e.stopPropagation()}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        {/* Drawer Handle */}
        <div className="flex justify-center pt-2 pb-1" onClick={(e) => e.stopPropagation()}>
          <div className="w-10 h-1 bg-gray-300 rounded-full"></div>
        </div>

        {/* Header */}
        <div className="sticky top-0 bg-green-600 z-10 p-4 flex items-center justify-between" onClick={(e) => e.stopPropagation()}>
          <h2 className="text-xl font-bold text-white">Chi ti·∫øt s·∫£n ph·∫©m</h2>
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); onToggleWishlist(); }} className="text-white hover:text-green-100">
              <Calendar 
                className="h-5 w-5" 
              />
            </Button>
            <Button variant="ghost" size="sm" onClick={(e) => e.stopPropagation()} className="text-white hover:text-green-100">
              <Share2 className="h-5 w-5" />
            </Button>
            <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); onClose(); }} className="text-white hover:text-green-100">
              <X className="h-6 w-6" />
            </Button>
          </div>
        </div>

        {/* Scrollable Content */}
        <div 
          ref={scrollContainerRef}
          className="flex-1 overflow-y-auto overscroll-contain p-4 pb-8"
          style={{ WebkitOverflowScrolling: 'touch' }}
        >
          {/* Hero Image Carousel Section */}
          <div className="relative">
            {productImages.length > 0 ? (
              <>
                {/* Main Image Carousel */}
                <div className="relative w-full h-80 overflow-hidden">
                  <div 
                    className="flex transition-transform duration-300 ease-in-out h-full"
                    style={{ transform: `translateX(-${selectedImage * 100}%)` }}
                  >
                    {productImages.map((image, index) => (
                      <div key={index} className="w-full h-full flex-shrink-0">
                        <img
                          src={image}
                          alt={`${product.name} ${index + 1}`}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.currentTarget.style.display = 'none';
                            if (e.currentTarget.nextElementSibling) {
                              (e.currentTarget.nextElementSibling as HTMLElement).style.display = 'flex';
                            }
                          }}
                        />
                        {/* Error fallback for each image */}
                        <div className="hidden w-full h-full bg-gray-100 flex items-center justify-center text-center">
                          <div>
                            <span className="text-6xl block mb-2">üñºÔ∏è</span>
                            <p className="text-gray-500">Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  {/* Dots Indicators - Mockup Style: o O o o */}
                  {productImages.length > 1 && (
                    <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
                      {productImages.map((_, index) => (
                        <button
                          key={index}
                          onClick={() => setSelectedImage(index)}
                          className={`transition-all duration-200 ${
                            selectedImage === index 
                              ? 'w-3 h-3 bg-white rounded-full shadow-lg' 
                              : 'w-2 h-2 bg-white/60 rounded-full'
                          }`}
                        />
                      ))}
                    </div>
                  )}
                  
                  {/* Touch/Swipe Navigation Hints */}
                  {productImages.length > 1 && (
                    <>
                      {selectedImage > 0 && (
                        <button
                          onClick={() => setSelectedImage(selectedImage - 1)}
                          className="absolute left-2 top-1/2 transform -translate-y-1/2 w-8 h-8 bg-black/30 text-white rounded-full flex items-center justify-center hover:bg-black/50 transition-colors"
                        >
                          ‚Äπ
                        </button>
                      )}
                      {selectedImage < productImages.length - 1 && (
                        <button
                          onClick={() => setSelectedImage(selectedImage + 1)}
                          className="absolute right-2 top-1/2 transform -translate-y-1/2 w-8 h-8 bg-black/30 text-white rounded-full flex items-center justify-center hover:bg-black/50 transition-colors"
                        >
                          ‚Ä∫
                        </button>
                      )}
                    </>
                  )}
                </div>
              </>
            ) : (
              // No product images - Enhanced placeholder matching mockup
              <div className="w-full h-80 bg-gradient-to-b from-gray-50 to-gray-100 flex items-center justify-center">
                <div className="text-center">
                  <span className="text-8xl mb-4 block">üì∏</span>
                  <p className="text-gray-600 text-lg font-medium">[ H√¨nh ·∫£nh / video ]</p>
                  <p className="text-gray-400 text-sm mt-1">Nhang ch√°y, nguy√™n li·ªáu</p>
                </div>
              </div>
            )}
          </div>

          {/* Product Info */}
          <div className="bg-white rounded-t-lg mx-4 mt-4 p-4 shadow-sm border border-gray-100">
            <div className="mb-4">
              <h1 className="text-xl font-bold text-gray-900 mb-2">
                {product.name}
              </h1>
              
              {/* Rating - Only show if reviews with ratings exist */}
              {reviews.length > 0 && averageRating > 0 && (
                <div className="flex items-center gap-2 mb-2">
                  <div className="flex items-center">
                    {renderStars(Math.round(averageRating))}
                  </div>
                  <span className="text-sm text-gray-600">
                    {averageRating.toFixed(1)} ({reviews.length} ƒë√°nh gi√°)
                  </span>
                </div>
              )}

              {/* Price & Stock */}
              <div className="flex items-baseline gap-3 mb-3">
                <span className="text-3xl font-bold text-green-600">
                  {product.price.toLocaleString('vi-VN')}‚Ç´
                </span>
                <Badge variant="secondary" className="text-sm">
                  C√≤n {product.stock} s·∫£n ph·∫©m
                </Badge>
              </div>

              {/* Description */}
              {product.short_description && (
                <p className="text-gray-600 mb-4 leading-relaxed">
                  {product.short_description}
                </p>
              )}

              {/* Long Description */}
              {(product.description || product.short_description) ? (
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-2">M√¥ t·∫£ chi ti·∫øt</h3>
                  <p className="text-gray-600 leading-relaxed">
                    {product.description || product.short_description}
                  </p>
                </div>
              ) : (
                <div className="mb-6">
                  <h3 className="font-semibold text-gray-900 mb-2">M√¥ t·∫£ chi ti·∫øt</h3>
                  <div className="text-center py-4">
                    <p className="text-gray-500">Th√¥ng tin ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t</p>
                  </div>
                </div>
              )}

              {/* Action Buttons - Positioned After Description */}
              <div ref={actionButtonsRef} id="action-buttons" className="mb-6 space-y-4">
                {/* Quantity Selector Row */}
                <div className="flex items-center justify-center gap-2 mb-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={(e) => { e.stopPropagation(); handleQuantityChange(-1); }}
                    disabled={quantity <= 1}
                    className="w-10 h-10 p-0"
                  >
                    <Minus className="h-4 w-4" />
                  </Button>
                  <span className="w-16 text-center font-semibold text-lg">
                    {quantity}
                  </span>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={(e) => { e.stopPropagation(); handleQuantityChange(1); }}
                    disabled={quantity >= product.stock}
                    className="w-10 h-10 p-0"
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>

                {/* Unified Action Button - Matching Storefront Style */}
                <div className="flex flex-col gap-3">
                  <Button
                    onClick={(e) => { e.stopPropagation(); handleAddToCart(); }}
                    className="w-full bg-green-500 hover:bg-green-600 text-white py-3 rounded-full font-semibold shadow-sm hover:shadow-md transition-all duration-200 transform hover:scale-[1.02] active:scale-95"
                    disabled={product.stock === 0}
                  >
                    <ShoppingCart className="h-5 w-5 mr-2" />
                    Th√™m v√†o Gi·ªè h√†ng
                  </Button>
                  
                  <Button
                    onClick={(e) => { e.stopPropagation(); handleThinhNhang(); }}
                    className="w-full bg-amber-500 hover:bg-amber-600 text-white py-3 rounded-full font-semibold shadow-sm hover:shadow-md transition-all duration-200 transform hover:scale-[1.02] active:scale-95"
                    disabled={product.stock === 0}
                  >
                    <Calendar className="h-5 w-5 mr-2" />
                    Th·ªânh Nhang
                  </Button>
                </div>
                
                {/* Price Display */}
                <div className="text-center mt-2 text-gray-600 text-sm">
                  T·ªïng: <span className="font-semibold text-green-600">{(product.price * quantity).toLocaleString('vi-VN')}‚Ç´</span>
                </div>
              </div>

              {/* Benefits Section - Organic Food Vietnamese Style */}
              <div className="mb-6 bg-green-50 rounded-lg p-4 border border-green-100">
                <h3 className="font-semibold text-gray-900 mb-3 text-lg">üåø L·ª£i √≠ch ch√≠nh</h3>
                
                {/* Smart benefits based on product data */}
                <div className="space-y-3">
                  {/* Dynamic benefits from product.benefits with proper fallback */}
                  {(() => {
                    // Get benefits from product data safely with proper typing
                    const productBenefits = product.benefits;
                    let benefitsList: string[] = [];
                    
                    // Convert benefits to array format
                    if (typeof productBenefits === 'string' && productBenefits.trim()) {
                      benefitsList = productBenefits.split(',').map(b => b.trim()).filter(b => b);
                    } else if (Array.isArray(productBenefits) && productBenefits.length > 0) {
                      benefitsList = productBenefits.filter(b => typeof b === 'string' && b.trim());
                    }
                    
                    // If no valid dynamic benefits, use generic organic benefits
                    if (benefitsList.length === 0) {
                      benefitsList = [
                        '100% t·ª± nhi√™n, kh√¥ng h√≥a ch·∫•t',
                        'An to√†n cho c·∫£ gia ƒë√¨nh', 
                        'Ngu·ªìn g·ªëc r√µ r√†ng, truy xu·∫•t ƒë∆∞·ª£c',
                        'Gi√° tr·ªã dinh d∆∞·ª°ng cao'
                      ];
                    }
                    
                    return benefitsList.map((benefit: string, index: number) => (
                      <div key={index} className="flex items-start gap-3">
                        <div className="mt-0.5 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
                          <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        </div>
                        <span className="text-gray-700 leading-relaxed">{benefit}</span>
                      </div>
                    ));
                  })()}
                </div>
              </div>

              {/* Shipping Info Section with Checkmarks */}
              <div className="mb-6 bg-blue-50 rounded-lg p-4 border border-blue-100">
                <h3 className="font-semibold text-gray-900 mb-3 text-lg">üöö Th√¥ng tin giao h√†ng</h3>
                
                <div className="space-y-3">
                  {[
                    'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn ƒë∆°n h√†ng t·ª´ 300.000‚Ç´',
                    'Giao h√†ng trong 24h khu v·ª±c n·ªôi th√†nh',
                    'ƒê√≥ng g√≥i an to√†n, gi·ªØ t∆∞∆°i ngon',
                    'Ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n',
                    'ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu kh√¥ng h√†i l√≤ng'
                  ].map((shippingInfo, index) => (
                    <div key={index} className="flex items-start gap-3">
                      <div className="mt-0.5 w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
                        <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <span className="text-gray-700 leading-relaxed">{shippingInfo}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Accordion Sections for Detailed Information */}
              <div className="mb-6 bg-white rounded-lg border border-gray-100 overflow-hidden">
                {/* Product Description Accordion */}
                <div className="border-b border-gray-200">
                  <button
                    onClick={() => toggleAccordion('description')}
                    className="w-full flex items-center justify-between py-4 px-4 text-left hover:bg-gray-50 transition-colors"
                  >
                    <h3 className="font-semibold text-gray-900 text-lg flex items-center gap-2">
                      üìã M√¥ t·∫£ s·∫£n ph·∫©m
                    </h3>
                    {openAccordions.description ? (
                      <ChevronUp className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    )}
                  </button>
                  {openAccordions.description && (
                    <div className="pb-4 px-4 text-gray-700 leading-relaxed">
                      <p className="mb-3">
                        {product.description || 'S·∫£n ph·∫©m h·ªØu c∆° ch·∫•t l∆∞·ª£ng cao, ƒë∆∞·ª£c s·∫£n xu·∫•t theo ti√™u chu·∫©n VietGAP. Kh√¥ng s·ª≠ d·ª•ng h√≥a ch·∫•t ƒë·ªôc h·∫°i, ƒë·∫£m b·∫£o an to√†n cho s·ª©c kh·ªèe ng∆∞·ªùi ti√™u d√πng.'}
                      </p>
                      <p>
                        ƒê∆∞·ª£c tr·ªìng v√† chƒÉm s√≥c theo ph∆∞∆°ng ph√°p t·ª± nhi√™n, gi·ªØ nguy√™n h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng v√† gi√° tr·ªã dinh d∆∞·ª°ng cao nh·∫•t.
                      </p>
                    </div>
                  )}
                </div>

                {/* Ingredients Accordion */}
                <div className="border-b border-gray-200">
                  <button
                    onClick={() => toggleAccordion('ingredients')}
                    className="w-full flex items-center justify-between py-4 text-left hover:bg-gray-50 transition-colors"
                  >
                    <h3 className="font-semibold text-gray-900 text-lg flex items-center gap-2">
                      üåø Th√†nh ph·∫ßn
                    </h3>
                    {openAccordions.ingredients ? (
                      <ChevronUp className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    )}
                  </button>
                  {openAccordions.ingredients && (
                    <div className="pb-4 text-gray-700 leading-relaxed">
                      <ul className="space-y-2">
                        <li>‚Ä¢ 100% th√†nh ph·∫ßn t·ª± nhi√™n</li>
                        <li>‚Ä¢ Kh√¥ng ch·∫•t b·∫£o qu·∫£n</li>
                        <li>‚Ä¢ Kh√¥ng h∆∞∆°ng li·ªáu nh√¢n t·∫°o</li>
                        <li>‚Ä¢ Kh√¥ng ch·∫•t m√†u t·ªïng h·ª£p</li>
                        <li>‚Ä¢ ƒê∆∞·ª£c ch·ª©ng nh·∫≠n h·ªØu c∆°</li>
                      </ul>
                    </div>
                  )}
                </div>

                {/* Usage Instructions Accordion */}
                <div className="border-b border-gray-200">
                  <button
                    onClick={() => toggleAccordion('usage')}
                    className="w-full flex items-center justify-between py-4 text-left hover:bg-gray-50 transition-colors"
                  >
                    <h3 className="font-semibold text-gray-900 text-lg flex items-center gap-2">
                      üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
                    </h3>
                    {openAccordions.usage ? (
                      <ChevronUp className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    )}
                  </button>
                  {openAccordions.usage && (
                    <div className="pb-4 text-gray-700 leading-relaxed">
                      <div className="space-y-3">
                        <div>
                          <strong>B·∫£o qu·∫£n:</strong> N∆°i kh√¥ r√°o, tho√°ng m√°t, tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp
                        </div>
                        <div>
                          <strong>S·ª≠ d·ª•ng:</strong> R·ª≠a s·∫°ch tr∆∞·ªõc khi ch·∫ø bi·∫øn
                        </div>
                        <div>
                          <strong>H·∫°n s·ª≠ d·ª•ng:</strong> Xem tr√™n bao b√¨ s·∫£n ph·∫©m
                        </div>
                        <div>
                          <strong>L∆∞u √Ω:</strong> S·∫£n ph·∫©m t·ª± nhi√™n, c√≥ th·ªÉ c√≥ s·ª± kh√°c bi·ªát v·ªÅ m√†u s·∫Øc v√† k√≠ch th∆∞·ªõc
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* FAQ Accordion */}
                <div className="border-b border-gray-200">
                  <button
                    onClick={() => toggleAccordion('faq')}
                    className="w-full flex items-center justify-between py-4 text-left hover:bg-gray-50 transition-colors"
                  >
                    <h3 className="font-semibold text-gray-900 text-lg flex items-center gap-2">
                      ‚ùì FAQ th∆∞·ªùng g·∫∑p
                    </h3>
                    {openAccordions.faq ? (
                      <ChevronUp className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    )}
                  </button>
                  {openAccordions.faq && (
                    <div className="pb-4 text-gray-700 leading-relaxed">
                      <div className="space-y-4">
                        <div>
                          <strong>Q: S·∫£n ph·∫©m c√≥ an to√†n cho tr·∫ª em kh√¥ng?</strong>
                          <p>A: Ho√†n to√†n an to√†n. S·∫£n ph·∫©m ƒë∆∞·ª£c s·∫£n xu·∫•t theo ti√™u chu·∫©n h·ªØu c∆°, kh√¥ng ch·ª©a h√≥a ch·∫•t ƒë·ªôc h·∫°i.</p>
                        </div>
                        <div>
                          <strong>Q: T√¥i c√≥ th·ªÉ tr·∫£ h√†ng n·∫øu kh√¥ng h√†i l√≤ng?</strong>
                          <p>A: C√≥, b·∫°n c√≥ th·ªÉ ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m c√≤n nguy√™n v·∫πn.</p>
                        </div>
                        <div>
                          <strong>Q: S·∫£n ph·∫©m c√≥ ƒë∆∞·ª£c ch·ª©ng nh·∫≠n kh√¥ng?</strong>
                          <p>A: C√≥, s·∫£n ph·∫©m ƒë·∫°t ch·ª©ng nh·∫≠n VietGAP v√† c√°c ti√™u chu·∫©n ch·∫•t l∆∞·ª£ng qu·ªëc t·∫ø.</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* üéØ VIETNAMESE INCENSE CUSTOM DESCRIPTIONS ACCORDION */}
                <div className="border-b border-gray-200">
                  <button
                    onClick={() => toggleAccordion('customDescriptions')}
                    className="w-full flex items-center justify-between py-4 text-left hover:bg-gray-50 transition-colors"
                  >
                    <h3 className="font-semibold text-gray-900 text-lg flex items-center gap-2">
                      üôè Th√¥ng tin t√¢m linh & vƒÉn h√≥a
                    </h3>
                    {openAccordions.customDescriptions ? (
                      <ChevronUp className="h-5 w-5 text-gray-500" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-500" />
                    )}
                  </button>
                  {openAccordions.customDescriptions && (
                    <div className="pb-4 px-4 bg-gradient-to-br from-purple-50 to-blue-50">
                      <ComprehensiveDisplay product={product as any} />
                    </div>
                  )}
                </div>
              </div>

              {/* Enhanced Reviews Section */}
              <div className="mb-6">
                {/* Reviews Header with Average Rating */}
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold text-gray-900 text-lg">
                    üí¨ ƒê√°nh gi√° t·ª´ kh√°ch h√†ng
                  </h3>
                  {!reviewsLoading && reviews.length > 0 && (() => {
                    // Calculate average rating using shared helper for consistency
                    const validRatings = reviews.map(review => parseRating(review.rating));
                    const averageRating = validRatings.reduce((acc, rating) => acc + rating, 0) / validRatings.length;
                    
                    return (
                      <div className="flex items-center gap-2">
                        <div className="flex items-center">
                          {renderStars(Math.round(averageRating))}
                        </div>
                        <span className="text-sm font-medium text-gray-600">
                          {averageRating.toFixed(1)}/5
                        </span>
                        <span className="text-sm text-gray-500">({reviews.length} ƒë√°nh gi√°)</span>
                      </div>
                    );
                  })()}
                </div>
                
                {reviewsLoading ? (
                  // Enhanced loading state
                  <div className="text-center py-8">
                    <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-green-600 mx-auto"></div>
                    <p className="text-gray-500 text-sm mt-3">ƒêang t·∫£i ƒë√°nh gi√°...</p>
                  </div>
                ) : reviews.length > 0 ? (
                  // Enhanced reviews display
                  <div className="space-y-4">
                    {reviews.map((review, index) => (
                      <div key={review.id || index} className="bg-white border border-gray-200 p-5 rounded-xl shadow-sm hover:shadow-md transition-shadow">
                        {/* Review Header */}
                        <div className="flex items-start gap-3 mb-3">
                          {/* User Avatar */}
                          <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0">
                            <span className="text-green-600 font-semibold text-sm">
                              {(review.author || review.customer_name || 'KH').charAt(0).toUpperCase()}
                            </span>
                          </div>
                          
                          {/* User Info and Rating */}
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-1">
                              <div className="flex items-center gap-2">
                                <span className="font-medium text-gray-900">
                                  {review.author || review.customer_name || 'Kh√°ch h√†ng'}
                                </span>
                                {/* Verified Purchase Badge */}
                                <span className="bg-green-100 text-green-700 text-xs px-2 py-0.5 rounded-full flex items-center gap-1">
                                  ‚úì ƒê√£ mua h√†ng
                                </span>
                              </div>
                              <div className="flex items-center">
                                {renderStars(parseRating(review.rating))}
                              </div>
                            </div>
                            
                            {/* Review Date */}
                            <div className="text-xs text-gray-500">
                              {review.date || review.created_at || '2 ng√†y tr∆∞·ªõc'}
                            </div>
                          </div>
                        </div>
                        
                        {/* Review Content */}
                        <p className="text-gray-700 leading-relaxed mb-3">
                          {review.comment || review.content || 'S·∫£n ph·∫©m r·∫•t t·ªët, ch·∫•t l∆∞·ª£ng h·ªØu c∆° tuy·ªát v·ªùi. T√¥i s·∫Ω mua l·∫°i l·∫ßn sau.'}
                        </p>
                        
                        {/* Review Actions */}
                        <div className="flex items-center justify-between pt-3 border-t border-gray-100">
                          <div className="flex items-center gap-4">
                            <button className="text-sm text-gray-500 hover:text-green-600 transition-colors flex items-center gap-1">
                              üëç H·ªØu √≠ch (12)
                            </button>
                            <button className="text-sm text-gray-500 hover:text-gray-700 transition-colors">
                              Tr·∫£ l·ªùi
                            </button>
                          </div>
                          {/* Rating Value Display */}
                          <span className="text-sm font-medium text-green-600">
                            {parseRating(review.rating)}/5 ‚≠ê
                          </span>
                        </div>
                      </div>
                    ))}
                    
                    {/* View More Reviews Button */}
                    {reviews.length >= 3 && (
                      <div className="text-center pt-2">
                        <button className="text-green-600 hover:text-green-700 font-medium text-sm underline">
                          Xem th√™m ƒë√°nh gi√°
                        </button>
                      </div>
                    )}
                  </div>
                ) : (
                  // Enhanced empty state
                  <div className="text-center py-8 bg-gray-50 rounded-xl">
                    <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                      <Star className="h-8 w-8 text-gray-400" />
                    </div>
                    <h4 className="font-medium text-gray-900 mb-2">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</h4>
                    <p className="text-gray-500 text-sm mb-4">H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n</p>
                    <button className="bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-green-700 transition-colors">
                      Vi·∫øt ƒë√°nh gi√° ƒë·∫ßu ti√™n
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Sticky Bottom Buttons - Professional & Above Bottom Nav */}
        {showStickyButtons && (
          <div className="fixed bottom-20 left-0 right-0 bg-white/95 backdrop-blur-sm border-t border-gray-200 shadow-2xl p-4 z-[9999] mx-auto max-w-md" onClick={(e) => e.stopPropagation()}>
            {/* Enhanced Background Blur */}
            <div className="absolute inset-0 bg-gradient-to-t from-white via-white/95 to-white/90 rounded-t-2xl"></div>
            
            {/* Content with relative positioning */}
            <div className="relative z-10">
              {/* Quantity Selector Row */}
              <div className="flex items-center justify-center gap-3 mb-4">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={(e) => { e.stopPropagation(); handleQuantityChange(-1); }}
                  disabled={quantity <= 1}
                  className="w-12 h-12 p-0 border-2 border-green-200 hover:border-green-400 hover:bg-green-50 transition-all rounded-xl"
                >
                  <Minus className="h-5 w-5 text-green-600" />
                </Button>
                <div className="w-20 text-center">
                  <span className="text-xl font-bold text-gray-900 bg-green-50 px-4 py-2 rounded-xl border-2 border-green-100">
                    {quantity}
                  </span>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={(e) => { e.stopPropagation(); handleQuantityChange(1); }}
                  disabled={quantity >= product.stock}
                  className="w-12 h-12 p-0 border-2 border-green-200 hover:border-green-400 hover:bg-green-50 transition-all rounded-xl"
                >
                  <Plus className="h-5 w-5 text-green-600" />
                </Button>
              </div>

              {/* Two Action Buttons - Identical Professional Style */}
              <div className="flex items-center gap-3">
                {/* Add to Cart Button */}
                <Button
                  onClick={(e) => { e.stopPropagation(); handleAddToCart(); }}
                  className="flex-1 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white py-4 rounded-2xl font-bold shadow-xl hover:shadow-2xl transform hover:scale-[1.02] transition-all duration-200 border-0"
                  disabled={product.stock === 0}
                >
                  <ShoppingCart className="h-5 w-5 mr-2" />
                  <span className="text-sm tracking-wide">Gi·ªè h√†ng</span>
                </Button>
                
                {/* Th·ªânh Nhang (Premium Purchase) Button */}
                <Button
                  onClick={(e) => { e.stopPropagation(); handleThinhNhang(); }}
                  className="flex-1 bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white py-4 rounded-2xl font-bold shadow-xl hover:shadow-2xl transform hover:scale-[1.02] transition-all duration-200 border-0 relative overflow-hidden"
                  disabled={product.stock === 0}
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-yellow-400/20 to-transparent"></div>
                  <Calendar className="h-5 w-5 mr-2 relative z-10" />
                  <span className="text-sm tracking-wide relative z-10">Th·ªânh Nhang</span>
                </Button>
              </div>
              
              {/* Enhanced Price Display */}
              <div className="text-center mt-3 bg-green-50 py-2 px-4 rounded-xl border border-green-100">
                <span className="text-gray-600 text-sm">T·ªïng c·ªông: </span>
                <span className="font-bold text-green-700 text-lg">{(product.price * quantity).toLocaleString('vi-VN')}‚Ç´</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}