import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { 
  Settings, 
  User, 
  CreditCard, 
  Bell,
  Save,
  Loader2,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Edit3,
  Shield,
  Info,
  Award,
  Calendar,
  Mail,
  Phone,
  MapPin
} from 'lucide-react';
import AffiliateLayout from '@/layouts/AffiliateLayout';

interface AffiliateProfile {
  id: string;
  name: string;
  email: string;
  phone?: string;
  avatar?: string;
  affiliateCode: string;
  commissionRate: number;
  affiliateStatus: string;
  joinDate: string;
  totalSpent?: number;
  membershipTier?: string;
  affiliateData?: any;
}

interface PaymentInfo {
  bankName?: string;
  accountNumber?: string;
  accountName?: string;
  paymentMethod?: string;
  paymentNotes?: string;
}

interface AffiliateSessionResponse {
  authenticated: boolean;
  affiliate: AffiliateProfile;
}

export default function AffiliateSettings() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // State for form data
  const [profileData, setProfileData] = useState({
    name: '',
    email: '',
    phone: '',
    avatar: ''
  });
  
  const [paymentData, setPaymentData] = useState<PaymentInfo>({
    bankName: '',
    accountNumber: '',
    accountName: '',
    paymentMethod: 'bank_transfer',
    paymentNotes: ''
  });
  
  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: true,
    smsNotifications: false,
    orderNotifications: true,
    paymentNotifications: true,
    marketingEmails: false
  });

  const [editingProfile, setEditingProfile] = useState(false);
  const [editingPayment, setEditingPayment] = useState(false);

  // Fetch current affiliate session data
  const { 
    data: sessionData, 
    isLoading: sessionLoading, 
    error: sessionError,
    refetch: refetchSession
  } = useQuery<AffiliateSessionResponse>({
    queryKey: ['/api/affiliate-auth/session'],
    queryFn: async () => {
      const response = await apiRequest('GET', '/api/affiliate-auth/session');
      
      if (!response.ok) {
        throw new Error('Not authenticated');
      }
      
      return response.json();
    },
    retry: false,
    onSuccess: (data) => {
      if (data.authenticated) {
        const affiliate = data.affiliate;
        setProfileData({
          name: affiliate.name || '',
          email: affiliate.email || '',
          phone: affiliate.phone || '',
          avatar: affiliate.avatar || ''
        });
        
        // Load payment info from affiliate data
        const paymentInfo = affiliate.affiliateData?.paymentInfo || {};
        setPaymentData({
          bankName: paymentInfo.bankName || '',
          accountNumber: paymentInfo.accountNumber || '',
          accountName: paymentInfo.accountName || '',
          paymentMethod: paymentInfo.paymentMethod || 'bank_transfer',
          paymentNotes: paymentInfo.paymentNotes || ''
        });

        // Load notification settings
        const notifications = affiliate.affiliateData?.notificationSettings || {};
        setNotificationSettings({
          emailNotifications: notifications.emailNotifications !== false,
          smsNotifications: notifications.smsNotifications === true,
          orderNotifications: notifications.orderNotifications !== false,
          paymentNotifications: notifications.paymentNotifications !== false,
          marketingEmails: notifications.marketingEmails === true
        });
      }
    }
  });

  // Update profile mutation
  const updateProfileMutation = useMutation({
    mutationFn: async (data: typeof profileData) => {
      const response = await apiRequest('PUT', '/api/affiliate-portal/profile', {
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin');
      }

      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        description: "Th√¥ng tin h·ªì s∆° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
        duration: 3000,
      });
      setEditingProfile(false);
      queryClient.invalidateQueries(['/api/affiliate-auth/session']);
    },
    onError: (error: Error) => {
      toast({
        title: "L·ªói c·∫≠p nh·∫≠t",
        description: error.message,
        variant: "destructive",
        duration: 3000,
      });
    },
  });

  // Update payment info mutation
  const updatePaymentMutation = useMutation({
    mutationFn: async (data: PaymentInfo) => {
      const response = await apiRequest('PUT', '/api/affiliate-portal/payment-info', {
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin thanh to√°n');
      }

      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
        description: "Th√¥ng tin thanh to√°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
        duration: 3000,
      });
      setEditingPayment(false);
      queryClient.invalidateQueries(['/api/affiliate-auth/session']);
    },
    onError: (error: Error) => {
      toast({
        title: "L·ªói c·∫≠p nh·∫≠t",
        description: error.message,
        variant: "destructive",
        duration: 3000,
      });
    },
  });

  const handleProfileSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    updateProfileMutation.mutate(profileData);
  };

  const handlePaymentSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    updatePaymentMutation.mutate(paymentData);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">üü¢ Ho·∫°t ƒë·ªông</Badge>;
      case 'inactive':
        return <Badge className="bg-yellow-100 text-yellow-800">üü° T·∫°m d·ª´ng</Badge>;
      case 'suspended':
        return <Badge className="bg-red-100 text-red-800">üî¥ ƒê√¨nh ch·ªâ</Badge>;
      default:
        return <Badge variant="secondary">Ch∆∞a x√°c ƒë·ªãnh</Badge>;
    }
  };

  if (sessionLoading) {
    return (
      <AffiliateLayout>
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <div className="h-8 bg-gray-200 rounded w-64 animate-pulse"></div>
              <div className="h-4 bg-gray-200 rounded w-48 animate-pulse"></div>
            </div>
          </div>
          
          <div className="grid gap-6">
            {[1,2,3].map(i => (
              <Card key={i} className="animate-pulse">
                <CardContent className="p-6">
                  <div className="space-y-4">
                    <div className="h-6 bg-gray-200 rounded w-48"></div>
                    <div className="space-y-2">
                      <div className="h-4 bg-gray-200 rounded w-full"></div>
                      <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
          
          <div className="text-center py-8">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-blue-600" />
            <div className="text-gray-600">ƒêang t·∫£i c√†i ƒë·∫∑t t√†i kho·∫£n...</div>
          </div>
        </div>
      </AffiliateLayout>
    );
  }

  if (sessionError || !sessionData?.authenticated) {
    return (
      <AffiliateLayout>
        <div className="text-center py-12">
          <AlertCircle className="h-12 w-12 mx-auto mb-4 text-red-600" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            L·ªói t·∫£i d·ªØ li·ªáu
          </h3>
          <p className="text-gray-600 mb-6">
            Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.
          </p>
          <Button onClick={() => refetchSession()} className="bg-blue-600 hover:bg-blue-700">
            <RefreshCw className="h-4 w-4 mr-2" />
            Th·ª≠ l·∫°i
          </Button>
        </div>
      </AffiliateLayout>
    );
  }

  const affiliate = sessionData.affiliate;

  return (
    <AffiliateLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
              <div className="flex items-center justify-center w-10 h-10 bg-gradient-to-r from-gray-600 to-blue-600 rounded-full">
                <Settings className="h-6 w-6 text-white" />
              </div>
              C√†i ƒë·∫∑t T√†i kho·∫£n
            </h1>
            <p className="text-gray-600 mt-1">
              Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n, thanh to√°n v√† c√†i ƒë·∫∑t th√¥ng b√°o
            </p>
          </div>
        </div>

        {/* Account Status Overview */}
        <Card className="border-blue-200 bg-blue-50/50">
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Shield className="h-5 w-5 text-blue-600" />
              T·ªïng quan t√†i kho·∫£n
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="text-center p-4 bg-white rounded-lg">
                <Award className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                <div className="font-medium text-blue-900">M√£ Affiliate</div>
                <div className="text-sm font-mono text-blue-700">{affiliate.affiliateCode}</div>
              </div>
              <div className="text-center p-4 bg-white rounded-lg">
                <div className="text-2xl mb-2">üí∞</div>
                <div className="font-medium text-blue-900">T·ª∑ l·ªá hoa h·ªìng</div>
                <div className="text-sm text-blue-700">{affiliate.commissionRate}%</div>
              </div>
              <div className="text-center p-4 bg-white rounded-lg">
                <Calendar className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                <div className="font-medium text-blue-900">Tham gia t·ª´</div>
                <div className="text-sm text-blue-700">{formatDate(affiliate.joinDate)}</div>
              </div>
              <div className="text-center p-4 bg-white rounded-lg">
                <div className="mb-2">{getStatusBadge(affiliate.affiliateStatus)}</div>
                <div className="font-medium text-blue-900">Tr·∫°ng th√°i</div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Profile Information */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg flex items-center gap-2">
                <User className="h-5 w-5 text-purple-600" />
                Th√¥ng tin c√° nh√¢n
              </CardTitle>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setEditingProfile(!editingProfile)}
                disabled={updateProfileMutation.isPending}
              >
                <Edit3 className="h-4 w-4 mr-2" />
                {editingProfile ? 'H·ªßy' : 'Ch·ªânh s·ª≠a'}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleProfileSubmit} className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="name">H·ªç v√† t√™n <span className="text-red-500">*</span></Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      id="name"
                      type="text"
                      value={profileData.name}
                      onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}
                      className="pl-10"
                      disabled={!editingProfile}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email <span className="text-red-500">*</span></Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      id="email"
                      type="email"
                      value={profileData.email}
                      onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                      className="pl-10"
                      disabled={!editingProfile}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</Label>
                  <div className="relative">
                    <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      id="phone"
                      type="tel"
                      value={profileData.phone}
                      onChange={(e) => setProfileData(prev => ({ ...prev, phone: e.target.value }))}
                      className="pl-10"
                      placeholder="0987654321"
                      disabled={!editingProfile}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="avatar">Avatar URL</Label>
                  <Input
                    id="avatar"
                    type="url"
                    value={profileData.avatar}
                    onChange={(e) => setProfileData(prev => ({ ...prev, avatar: e.target.value }))}
                    placeholder="https://example.com/avatar.jpg"
                    disabled={!editingProfile}
                  />
                </div>
              </div>

              {editingProfile && (
                <div className="flex gap-4">
                  <Button 
                    type="submit" 
                    disabled={updateProfileMutation.isPending}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {updateProfileMutation.isPending ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        ƒêang c·∫≠p nh·∫≠t...
                      </>
                    ) : (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        L∆∞u thay ƒë·ªïi
                      </>
                    )}
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={() => setEditingProfile(false)}
                  >
                    H·ªßy
                  </Button>
                </div>
              )}
            </form>
          </CardContent>
        </Card>

        {/* Payment Information */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg flex items-center gap-2">
                <CreditCard className="h-5 w-5 text-green-600" />
                Th√¥ng tin thanh to√°n
              </CardTitle>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setEditingPayment(!editingPayment)}
                disabled={updatePaymentMutation.isPending}
              >
                <Edit3 className="h-4 w-4 mr-2" />
                {editingPayment ? 'H·ªßy' : 'Ch·ªânh s·ª≠a'}
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-start gap-2">
                <Info className="h-4 w-4 text-yellow-600 mt-0.5" />
                <div className="text-sm text-yellow-800">
                  <strong>L∆∞u √Ω:</strong> Th√¥ng tin thanh to√°n ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ chuy·ªÉn kho·∫£n hoa h·ªìng. 
                  Vui l√≤ng cung c·∫•p th√¥ng tin ch√≠nh x√°c ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫≠n ƒë∆∞·ª£c thanh to√°n ƒë√∫ng h·∫°n.
                </div>
              </div>
            </div>

            <form onSubmit={handlePaymentSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="paymentMethod">Ph∆∞∆°ng th·ª©c thanh to√°n</Label>
                <Select 
                  value={paymentData.paymentMethod} 
                  onValueChange={(value) => setPaymentData(prev => ({ ...prev, paymentMethod: value }))}
                  disabled={!editingPayment}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Ch·ªçn ph∆∞∆°ng th·ª©c" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="bank_transfer">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</SelectItem>
                    <SelectItem value="momo">V√≠ MoMo</SelectItem>
                    <SelectItem value="zalopay">V√≠ ZaloPay</SelectItem>
                    <SelectItem value="paypal">PayPal</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="bankName">T√™n ng√¢n h√†ng</Label>
                  <Input
                    id="bankName"
                    type="text"
                    value={paymentData.bankName}
                    onChange={(e) => setPaymentData(prev => ({ ...prev, bankName: e.target.value }))}
                    placeholder="VD: Vietcombank"
                    disabled={!editingPayment}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="accountNumber">S·ªë t√†i kho·∫£n</Label>
                  <Input
                    id="accountNumber"
                    type="text"
                    value={paymentData.accountNumber}
                    onChange={(e) => setPaymentData(prev => ({ ...prev, accountNumber: e.target.value }))}
                    placeholder="1234567890"
                    disabled={!editingPayment}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="accountName">T√™n ch·ªß t√†i kho·∫£n</Label>
                <Input
                  id="accountName"
                  type="text"
                  value={paymentData.accountName}
                  onChange={(e) => setPaymentData(prev => ({ ...prev, accountName: e.target.value }))}
                  placeholder="NGUYEN VAN A"
                  disabled={!editingPayment}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="paymentNotes">Ghi ch√∫ thanh to√°n</Label>
                <Textarea
                  id="paymentNotes"
                  value={paymentData.paymentNotes}
                  onChange={(e) => setPaymentData(prev => ({ ...prev, paymentNotes: e.target.value }))}
                  placeholder="Ghi ch√∫ th√™m v·ªÅ th√¥ng tin thanh to√°n..."
                  disabled={!editingPayment}
                />
              </div>

              {editingPayment && (
                <div className="flex gap-4">
                  <Button 
                    type="submit" 
                    disabled={updatePaymentMutation.isPending}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    {updatePaymentMutation.isPending ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        ƒêang c·∫≠p nh·∫≠t...
                      </>
                    ) : (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        L∆∞u th√¥ng tin thanh to√°n
                      </>
                    )}
                  </Button>
                  <Button 
                    type="button" 
                    variant="outline"
                    onClick={() => setEditingPayment(false)}
                  >
                    H·ªßy
                  </Button>
                </div>
              )}
            </form>
          </CardContent>
        </Card>

        {/* Notification Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Bell className="h-5 w-5 text-orange-600" />
              C√†i ƒë·∫∑t th√¥ng b√°o
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <Label className="text-base">Th√¥ng b√°o email</Label>
                  <p className="text-sm text-gray-600">Nh·∫≠n th√¥ng b√°o qua email</p>
                </div>
                <Switch
                  checked={notificationSettings.emailNotifications}
                  onCheckedChange={(checked) => 
                    setNotificationSettings(prev => ({ ...prev, emailNotifications: checked }))
                  }
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <Label className="text-base">Th√¥ng b√°o SMS</Label>
                  <p className="text-sm text-gray-600">Nh·∫≠n th√¥ng b√°o qua tin nh·∫Øn SMS</p>
                </div>
                <Switch
                  checked={notificationSettings.smsNotifications}
                  onCheckedChange={(checked) => 
                    setNotificationSettings(prev => ({ ...prev, smsNotifications: checked }))
                  }
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <Label className="text-base">Th√¥ng b√°o ƒë∆°n h√†ng</Label>
                  <p className="text-sm text-gray-600">Th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi t·ª´ gi·ªõi thi·ªáu</p>
                </div>
                <Switch
                  checked={notificationSettings.orderNotifications}
                  onCheckedChange={(checked) => 
                    setNotificationSettings(prev => ({ ...prev, orderNotifications: checked }))
                  }
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <Label className="text-base">Th√¥ng b√°o thanh to√°n</Label>
                  <p className="text-sm text-gray-600">Th√¥ng b√°o khi hoa h·ªìng ƒë∆∞·ª£c thanh to√°n</p>
                </div>
                <Switch
                  checked={notificationSettings.paymentNotifications}
                  onCheckedChange={(checked) => 
                    setNotificationSettings(prev => ({ ...prev, paymentNotifications: checked }))
                  }
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-1">
                  <Label className="text-base">Email marketing</Label>
                  <p className="text-sm text-gray-600">Nh·∫≠n th√¥ng tin khuy·∫øn m√£i v√† tin t·ª©c</p>
                </div>
                <Switch
                  checked={notificationSettings.marketingEmails}
                  onCheckedChange={(checked) => 
                    setNotificationSettings(prev => ({ ...prev, marketingEmails: checked }))
                  }
                />
              </div>
            </div>

            <div className="pt-4 border-t">
              <Button className="bg-orange-600 hover:bg-orange-700">
                <Save className="h-4 w-4 mr-2" />
                L∆∞u c√†i ƒë·∫∑t th√¥ng b√°o
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Request Commission Rate Change */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg flex items-center gap-2">
              <Award className="h-5 w-5 text-purple-600" />
              Y√™u c·∫ßu thay ƒë·ªïi t·ª∑ l·ªá hoa h·ªìng
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                <div className="flex items-start gap-3">
                  <Info className="h-5 w-5 text-purple-600 mt-0.5" />
                  <div>
                    <div className="font-medium text-purple-900 mb-2">
                      T·ª∑ l·ªá hoa h·ªìng hi·ªán t·∫°i: {affiliate.commissionRate}%
                    </div>
                    <div className="text-sm text-purple-700">
                      N·∫øu b·∫°n mu·ªën ƒë·ªÅ xu·∫•t thay ƒë·ªïi t·ª∑ l·ªá hoa h·ªìng, vui l√≤ng g·ª≠i y√™u c·∫ßu k√®m l√Ω do. 
                      Y√™u c·∫ßu s·∫Ω ƒë∆∞·ª£c xem x√©t d·ª±a tr√™n hi·ªáu su·∫•t v√† th√†nh t√≠ch c·ªßa b·∫°n.
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="requestedRate">T·ª∑ l·ªá hoa h·ªìng mong mu·ªën (%)</Label>
                  <Input
                    id="requestedRate"
                    type="number"
                    min="0"
                    max="50"
                    step="0.1"
                    placeholder="VD: 12.5"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="requestReason">L√Ω do y√™u c·∫ßu</Label>
                  <Textarea
                    id="requestReason"
                    placeholder="Vui l√≤ng m√¥ t·∫£ l√Ω do b·∫°n mu·ªën thay ƒë·ªïi t·ª∑ l·ªá hoa h·ªìng..."
                    rows={4}
                  />
                </div>
              </div>
              
              <Button variant="outline" className="w-full">
                <Award className="h-4 w-4 mr-2" />
                G·ª≠i y√™u c·∫ßu thay ƒë·ªïi t·ª∑ l·ªá hoa h·ªìng
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </AffiliateLayout>
  );
}