import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { X, Plus, AlertTriangle, Users, Target, MessageCircle, ShieldCheck, ChevronDown, ChevronRight } from 'lucide-react';
import type { UrgencyData, SocialProofData, PersonalizationData, LeadingQuestionsData, ObjectionHandlingData } from '@shared/schema';

// Sales Module Section Wrapper - Collapsible container
interface SalesModuleSectionProps {
  title: string;
  icon: React.ReactNode;
  moduleKey: string;
  defaultOpen?: boolean;
  children: React.ReactNode;
  isOpen: boolean;
  onToggle: (moduleKey: string) => void;
}

function SalesModuleSection({ 
  title, 
  icon, 
  moduleKey, 
  defaultOpen = false, 
  children,
  isOpen,
  onToggle 
}: SalesModuleSectionProps) {
  return (
    <div className="space-y-4 border-t pt-4">
      <Collapsible open={isOpen} onOpenChange={() => onToggle(moduleKey)}>
        <CollapsibleTrigger asChild>
          <button 
            type="button"
            className="w-full flex items-center justify-between cursor-pointer hover:bg-gray-50 -mx-2 px-2 py-1 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 text-left"
            aria-expanded={isOpen}
            aria-controls={`module-content-${moduleKey}`}
          >
            <h4 className="font-medium text-gray-900 flex items-center gap-2">
              {icon}
              {title}
            </h4>
            <div className="transition-transform duration-200" aria-hidden="true">
              {isOpen ? (
                <ChevronDown className="h-4 w-4 text-gray-500" />
              ) : (
                <ChevronRight className="h-4 w-4 text-gray-500" />
              )}
            </div>
          </button>
        </CollapsibleTrigger>
        <CollapsibleContent 
          id={`module-content-${moduleKey}`}
          className="data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden"
        >
          <div className="pt-4">
            {children}
          </div>
        </CollapsibleContent>
      </Collapsible>
    </div>
  );
}

// üö® 1. URGENCY DATA - T·∫°o c·∫£m gi√°c kh·∫©n c·∫•p
interface UrgencyDataFormProps {
  data: UrgencyData;
  onChange: (data: UrgencyData) => void;
}

export { SalesModuleSection };

export function UrgencyDataForm({ data, onChange }: UrgencyDataFormProps) {
  const updateField = (field: keyof UrgencyData, value: any) => {
    onChange({ ...data, [field]: value });
  };

  const addUrgencyMessage = () => {
    onChange({
      ...data,
      urgency_messages: [...data.urgency_messages, '']
    });
  };

  const removeUrgencyMessage = (index: number) => {
    onChange({
      ...data,
      urgency_messages: data.urgency_messages.filter((_: string, i: number) => i !== index)
    });
  };

  const updateUrgencyMessage = (index: number, value: string) => {
    const messages = [...data.urgency_messages];
    messages[index] = value;
    onChange({ ...data, urgency_messages: messages });
  };

  return (
    <div className="space-y-4">
        {/* Demand Level */}
        <div>
          <Label htmlFor="demandLevel">M·ª©c ƒë·ªô c·∫ßu</Label>
          <Select value={data.demand_level} onValueChange={(value) => updateField('demand_level', value as "low" | "medium" | "high")}>
            <SelectTrigger>
              <SelectValue placeholder="Ch·ªçn m·ª©c ƒë·ªô c·∫ßu" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="low">Th·∫•p</SelectItem>
              <SelectItem value="medium">Trung b√¨nh</SelectItem>
              <SelectItem value="high">Cao</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Sales Velocity */}
        <div>
          <Label htmlFor="salesVelocity">T·ªëc ƒë·ªô b√°n h√†ng (s·ªë l∆∞·ª£ng/ng√†y)</Label>
          <Input
            id="salesVelocity"
            type="number"
            value={data.sales_velocity}
            onChange={(e) => updateField('sales_velocity', parseInt(e.target.value) || 0)}
            placeholder="VD: 50"
          />
        </div>

        {/* Limited Edition */}
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id="isLimitedEdition"
            checked={data.is_limited_edition}
            onChange={(e) => updateField('is_limited_edition', e.target.checked)}
            className="rounded border-gray-300"
          />
          <Label htmlFor="isLimitedEdition">Phi√™n b·∫£n gi·ªõi h·∫°n</Label>
        </div>

        {/* Low Stock Threshold */}
        <div>
          <Label htmlFor="lowStockThreshold">Ng∆∞·ª°ng h√†ng s·∫Øp h·∫øt</Label>
          <Input
            id="lowStockThreshold"
            type="number"
            value={data.low_stock_threshold}
            onChange={(e) => updateField('low_stock_threshold', parseInt(e.target.value) || 10)}
            placeholder="VD: 10"
          />
        </div>

        {/* Urgency Messages */}
        <div>
          <div className="flex items-center justify-between mb-2">
            <Label>Th√¥ng ƒëi·ªáp kh·∫©n c·∫•p</Label>
            <Button type="button" onClick={addUrgencyMessage} size="sm" variant="outline">
              <Plus className="h-4 w-4 mr-1" />
              Th√™m
            </Button>
          </div>
          <div className="space-y-2">
            {data.urgency_messages.map((message: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Textarea
                  value={message}
                  onChange={(e) => updateUrgencyMessage(index, e.target.value)}
                  placeholder="VD: Ch·ªâ c√≤n 5 s·∫£n ph·∫©m cu·ªëi c√πng!"
                  rows={2}
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeUrgencyMessage(index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        </div>
    </div>
  );
}

// üë• 2. SOCIAL PROOF DATA - B·∫±ng ch·ª©ng x√£ h·ªôi
interface SocialProofDataFormProps {
  data: SocialProofData;
  onChange: (data: SocialProofData) => void;
}

export function SocialProofDataForm({ data, onChange }: SocialProofDataFormProps) {
  const updateField = (field: keyof SocialProofData, value: any) => {
    onChange({ ...data, [field]: value });
  };

  const addArrayItem = (field: keyof SocialProofData, defaultValue: string = '') => {
    const currentArray = data[field] as string[];
    onChange({
      ...data,
      [field]: [...currentArray, defaultValue]
    });
  };

  const removeArrayItem = (field: keyof SocialProofData, index: number) => {
    const currentArray = data[field] as string[];
    onChange({
      ...data,
      [field]: currentArray.filter((_: string, i: number) => i !== index)
    });
  };

  const updateArrayItem = (field: keyof SocialProofData, index: number, value: string) => {
    const currentArray = [...(data[field] as string[])];
    currentArray[index] = value;
    onChange({ ...data, [field]: currentArray });
  };

  return (
    <div className="space-y-4 border-t pt-4">
      <h4 className="font-medium text-gray-900 flex items-center gap-2">
        <Users className="h-5 w-5 text-blue-600" />
        üë• Social Proof Data - B·∫±ng Ch·ª©ng X√£ H·ªôi
      </h4>
      <div className="space-y-4">
        {/* Stats Grid */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <Label htmlFor="totalSold">T·ªïng ƒë√£ b√°n</Label>
            <Input
              id="totalSold"
              type="number"
              value={data.total_sold}
              onChange={(e) => updateField('total_sold', parseInt(e.target.value) || 0)}
              placeholder="VD: 1500"
            />
          </div>
          <div>
            <Label htmlFor="totalReviews">S·ªë l∆∞·ª£t ƒë√°nh gi√°</Label>
            <Input
              id="totalReviews"
              type="number"
              value={data.total_reviews}
              onChange={(e) => updateField('total_reviews', parseInt(e.target.value) || 0)}
              placeholder="VD: 450"
            />
          </div>
          <div>
            <Label htmlFor="averageRating">ƒê√°nh gi√° trung b√¨nh</Label>
            <Input
              id="averageRating"
              type="number"
              min="0"
              max="5"
              step="0.1"
              value={data.average_rating}
              onChange={(e) => updateField('average_rating', parseFloat(e.target.value) || 0)}
              placeholder="VD: 4.8"
            />
          </div>
          <div>
            <Label htmlFor="repurchaseRate">T·ª∑ l·ªá mua l·∫°i (%)</Label>
            <Input
              id="repurchaseRate"
              type="number"
              min="0"
              max="100"
              value={data.repurchase_rate}
              onChange={(e) => updateField('repurchase_rate', parseInt(e.target.value) || 0)}
              placeholder="VD: 75"
            />
          </div>
        </div>

        <Tabs defaultValue="media" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="media">Truy·ªÅn th√¥ng</TabsTrigger>
            <TabsTrigger value="celebrity">Ng∆∞·ªùi n·ªïi ti·∫øng</TabsTrigger>
            <TabsTrigger value="reviews">ƒê√°nh gi√°</TabsTrigger>
            <TabsTrigger value="trending">Trending</TabsTrigger>
          </TabsList>

          <TabsContent value="media" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>ƒê·ªÅ c·∫≠p truy·ªÅn th√¥ng</Label>
              <Button type="button" onClick={() => addArrayItem('media_mentions')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.media_mentions.map((mention: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  value={mention}
                  onChange={(e) => updateArrayItem('media_mentions', index, e.target.value)}
                  placeholder="VD: B√°o VnExpress, T·∫°p ch√≠ Ph·ª• N·ªØ..."
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('media_mentions', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="celebrity" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>Ng∆∞·ªùi n·ªïi ti·∫øng s·ª≠ d·ª•ng</Label>
              <Button type="button" onClick={() => addArrayItem('celebrity_users')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.celebrity_users.map((celebrity: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  value={celebrity}
                  onChange={(e) => updateArrayItem('celebrity_users', index, e.target.value)}
                  placeholder="VD: Hoa h·∫≠u Ti·ªÉu Vy, Ca sƒ© H·ªì Ng·ªçc H√†..."
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('celebrity_users', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="reviews" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>ƒê√°nh gi√° n·ªïi b·∫≠t (text simple)</Label>
              <Button type="button" onClick={() => addArrayItem('expert_endorsements')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.expert_endorsements.map((review: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Textarea
                  value={review}
                  onChange={(e) => updateArrayItem('expert_endorsements', index, e.target.value)}
                  placeholder="VD: D√πng 2 tu·∫ßn da m·ªãn h∆°n h·∫≥n, r·∫•t h√†i l√≤ng - Mrs. Lan, 35 tu·ªïi"
                  rows={3}
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('expert_endorsements', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="trending" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>Hashtags trending</Label>
              <Button type="button" onClick={() => addArrayItem('trending_hashtags')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.trending_hashtags.map((hashtag: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  value={hashtag}
                  onChange={(e) => updateArrayItem('trending_hashtags', index, e.target.value)}
                  placeholder="VD: #skincare #vietnam #beauty"
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('trending_hashtags', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

// üéØ 3. PERSONALIZATION DATA - C√° nh√¢n h√≥a c·ª±c cao
interface PersonalizationDataFormProps {
  data: PersonalizationData;
  onChange: (data: PersonalizationData) => void;
}

export function PersonalizationDataForm({ data, onChange }: PersonalizationDataFormProps) {
  const updateField = (field: keyof PersonalizationData, value: any) => {
    onChange({ ...data, [field]: value });
  };

  const updateTargetDemographics = (field: keyof PersonalizationData['target_demographics']['primary'], value: any) => {
    onChange({
      ...data,
      target_demographics: {
        ...data.target_demographics,
        primary: {
          ...data.target_demographics.primary,
          [field]: value
        }
      }
    });
  };

  const addArrayItem = (field: keyof PersonalizationData, defaultValue: string = '') => {
    const currentArray = data[field] as string[];
    onChange({
      ...data,
      [field]: [...currentArray, defaultValue]
    });
  };

  const removeArrayItem = (field: keyof PersonalizationData, index: number) => {
    const currentArray = data[field] as string[];
    onChange({
      ...data,
      [field]: currentArray.filter((_: string, i: number) => i !== index)
    });
  };

  const updateArrayItem = (field: keyof PersonalizationData, index: number, value: string) => {
    const currentArray = [...(data[field] as string[])];
    currentArray[index] = value;
    onChange({ ...data, [field]: currentArray });
  };

  return (
    <div className="space-y-4 border-t pt-4">
      <h4 className="font-medium text-gray-900 flex items-center gap-2">
        <Target className="h-5 w-5 text-green-600" />
        üéØ Personalization Data - C√° Nh√¢n H√≥a C·ª±c Cao
      </h4>
      <div className="space-y-4">
        {/* Income Bracket */}
        <div>
          <Label htmlFor="incomeBracket">Khung thu nh·∫≠p</Label>
          <Select value={data.income_bracket} onValueChange={(value) => updateField('income_bracket', value)}>
            <SelectTrigger>
              <SelectValue placeholder="Ch·ªçn khung thu nh·∫≠p" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="under-500k">D∆∞·ªõi 500k</SelectItem>
              <SelectItem value="500k-1m">500k - 1 tri·ªáu</SelectItem>
              <SelectItem value="1m-3m">1 - 3 tri·ªáu</SelectItem>
              <SelectItem value="3m-5m">3 - 5 tri·ªáu</SelectItem>
              <SelectItem value="5m-10m">5 - 10 tri·ªáu</SelectItem>
              <SelectItem value="above-10m">Tr√™n 10 tri·ªáu</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Target Demographics */}
        <div className="border rounded-lg p-4 bg-white">
          <Label className="text-sm font-semibold mb-3 block">üë• Nh√¢n kh·∫©u h·ªçc m·ª•c ti√™u</Label>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="ageRange">ƒê·ªô tu·ªïi</Label>
              <Input
                id="ageRange"
                value={data.target_demographics.primary.age_range}
                onChange={(e) => updateTargetDemographics('age_range', e.target.value)}
                placeholder="VD: 25-35 tu·ªïi"
              />
            </div>
            <div>
              <Label htmlFor="incomeLevel">M·ª©c thu nh·∫≠p</Label>
              <Select 
                value={data.target_demographics.primary.income_level} 
                onValueChange={(value) => updateTargetDemographics('income_level', value as "low" | "middle" | "high" | "premium")}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn m·ª©c thu nh·∫≠p" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">Th·∫•p</SelectItem>
                  <SelectItem value="middle">Trung b√¨nh</SelectItem>
                  <SelectItem value="high">Cao</SelectItem>
                  <SelectItem value="premium">Cao c·∫•p</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        <Tabs defaultValue="lifestyle" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="lifestyle">Phong c√°ch s·ªëng</TabsTrigger>
            <TabsTrigger value="profession">Ngh·ªÅ nghi·ªáp</TabsTrigger>
            <TabsTrigger value="scenarios">T√¨nh hu·ªëng s·ª≠ d·ª•ng</TabsTrigger>
          </TabsList>

          <TabsContent value="lifestyle" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>Tags phong c√°ch s·ªëng</Label>
              <Button type="button" onClick={() => addArrayItem('lifestyle_tags')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.lifestyle_tags.map((tag: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  value={tag}
                  onChange={(e) => updateArrayItem('lifestyle_tags', index, e.target.value)}
                  placeholder="VD: b·∫≠n r·ªôn, y√™u thi√™n nhi√™n, hi·ªán ƒë·∫°i..."
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('lifestyle_tags', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="profession" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>Ngh·ªÅ nghi·ªáp ph√π h·ª£p</Label>
              <Button type="button" onClick={() => addArrayItem('profession_fit')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.profession_fit.map((profession: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  value={profession}
                  onChange={(e) => updateArrayItem('profession_fit', index, e.target.value)}
                  placeholder="VD: nh√¢n vi√™n vƒÉn ph√≤ng, m·∫π b·ªâm s·ªØa, freelancer..."
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('profession_fit', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="scenarios" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>T√¨nh hu·ªëng s·ª≠ d·ª•ng</Label>
              <Button type="button" onClick={() => addArrayItem('usage_scenarios')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.usage_scenarios.map((scenario: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Textarea
                  value={scenario}
                  onChange={(e) => updateArrayItem('usage_scenarios', index, e.target.value)}
                  placeholder="VD: bu·ªïi s√°ng tr∆∞·ªõc khi ƒëi l√†m, t·ªëi tr∆∞·ªõc khi ng·ªß..."
                  rows={2}
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeArrayItem('usage_scenarios', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

// For Leading Questions and Objection Handling, I'll create simplified versions that work with arrays for now
// since the schema defines them as complex objects, but for the admin UI we can start with simple arrays

// üí¨ 4. LEADING QUESTIONS DATA - C√¢u h·ªèi g·ª£i m·ªü (Simplified)
interface LeadingQuestionsDataFormProps {
  data: LeadingQuestionsData;
  onChange: (data: LeadingQuestionsData) => void;
}

export function LeadingQuestionsDataForm({ data, onChange }: LeadingQuestionsDataFormProps) {
  const addStringItem = (field: 'discovery_prompts' | 'comparison_triggers' | 'emotional_hooks' | 'closing_questions') => {
    onChange({
      ...data,
      [field]: [...data[field], '']
    });
  };

  const removeStringItem = (field: 'discovery_prompts' | 'comparison_triggers' | 'emotional_hooks' | 'closing_questions', index: number) => {
    onChange({
      ...data,
      [field]: data[field].filter((_: string, i: number) => i !== index)
    });
  };

  const updateStringItem = (field: 'discovery_prompts' | 'comparison_triggers' | 'emotional_hooks' | 'closing_questions', index: number, value: string) => {
    const currentArray = [...data[field]];
    currentArray[index] = value;
    onChange({ ...data, [field]: currentArray });
  };

  return (
    <div className="space-y-4 border-t pt-4">
      <h4 className="font-medium text-gray-900 flex items-center gap-2">
        <MessageCircle className="h-5 w-5 text-purple-600" />
        üí¨ Leading Questions Data - C√¢u H·ªèi G·ª£i M·ªü
      </h4>
      <div className="space-y-4">
        <Tabs defaultValue="emotional" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="emotional">C·∫£m x√∫c</TabsTrigger>
            <TabsTrigger value="discovery">Kh√°m ph√°</TabsTrigger>
            <TabsTrigger value="comparison">So s√°nh</TabsTrigger>
            <TabsTrigger value="closing">Ch·ªët sale</TabsTrigger>
          </TabsList>

          <TabsContent value="emotional" className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label>C√¢u m√≥c c·∫£m x√∫c</Label>
                <Button type="button" onClick={() => addStringItem('emotional_hooks')} size="sm" variant="outline">
                  <Plus className="h-4 w-4 mr-1" />
                  Th√™m
                </Button>
              </div>
              <div className="space-y-2">
                {data.emotional_hooks.map((hook: string, index: number) => (
                  <div key={index} className="flex items-center gap-2">
                    <Textarea
                      value={hook}
                      onChange={(e) => updateStringItem('emotional_hooks', index, e.target.value)}
                      placeholder="VD: B·∫°n c√≥ t·ª´ng c·∫£m th·∫•y t·ª± tin v·ªõi l√†n da c·ªßa m√¨nh?"
                      rows={2}
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      onClick={() => removeStringItem('emotional_hooks', index)}
                      size="sm"
                      variant="ghost"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="discovery" className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label>G·ª£i √Ω kh√°m ph√°</Label>
                <Button type="button" onClick={() => addStringItem('discovery_prompts')} size="sm" variant="outline">
                  <Plus className="h-4 w-4 mr-1" />
                  Th√™m
                </Button>
              </div>
              <div className="space-y-2">
                {data.discovery_prompts.map((prompt: string, index: number) => (
                  <div key={index} className="flex items-center gap-2">
                    <Textarea
                      value={prompt}
                      onChange={(e) => updateStringItem('discovery_prompts', index, e.target.value)}
                      placeholder="VD: K·ªÉ v·ªÅ routine skincare hi·ªán t·∫°i c·ªßa b·∫°n?"
                      rows={2}
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      onClick={() => removeStringItem('discovery_prompts', index)}
                      size="sm"
                      variant="ghost"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="comparison" className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label>C√¢u h·ªèi so s√°nh</Label>
                <Button type="button" onClick={() => addStringItem('comparison_triggers')} size="sm" variant="outline">
                  <Plus className="h-4 w-4 mr-1" />
                  Th√™m
                </Button>
              </div>
              <div className="space-y-2">
                {data.comparison_triggers.map((trigger: string, index: number) => (
                  <div key={index} className="flex items-center gap-2">
                    <Textarea
                      value={trigger}
                      onChange={(e) => updateStringItem('comparison_triggers', index, e.target.value)}
                      placeholder="VD: So v·ªõi serum b·∫°n ƒëang d√πng, ƒëi·ªÅu g√¨ quan tr·ªçng nh·∫•t?"
                      rows={2}
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      onClick={() => removeStringItem('comparison_triggers', index)}
                      size="sm"
                      variant="ghost"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="closing" className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <Label>C√¢u h·ªèi ch·ªët sale</Label>
                <Button type="button" onClick={() => addStringItem('closing_questions')} size="sm" variant="outline">
                  <Plus className="h-4 w-4 mr-1" />
                  Th√™m
                </Button>
              </div>
              <div className="space-y-2">
                {data.closing_questions.map((question: string, index: number) => (
                  <div key={index} className="flex items-center gap-2">
                    <Textarea
                      value={question}
                      onChange={(e) => updateStringItem('closing_questions', index, e.target.value)}
                      placeholder="VD: B·∫°n s·∫µn s√†ng ƒë·∫ßu t∆∞ cho l√†n da ƒë·∫πp c·ªßa m√¨nh ch·ª©?"
                      rows={2}
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      onClick={() => removeStringItem('closing_questions', index)}
                      size="sm"
                      variant="ghost"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

// üõ°Ô∏è 5. OBJECTION HANDLING DATA - X·ª≠ l√Ω ph·∫£n ƒë·ªëi (Simplified)
interface ObjectionHandlingDataFormProps {
  data: ObjectionHandlingData;
  onChange: (data: ObjectionHandlingData) => void;
}

export function ObjectionHandlingDataForm({ data, onChange }: ObjectionHandlingDataFormProps) {
  const updatePriceJustification = (field: keyof ObjectionHandlingData['price_justification'], value: any) => {
    onChange({
      ...data,
      price_justification: {
        ...data.price_justification,
        [field]: value
      }
    });
  };

  const updateEffectivenessGuarantee = (field: keyof ObjectionHandlingData['effectiveness_guarantee'], value: any) => {
    onChange({
      ...data,
      effectiveness_guarantee: {
        ...data.effectiveness_guarantee,
        [field]: value
      }
    });
  };

  const addStringArrayItem = (field: 'quality_proof_points' | 'safety_assurance' | 'risk_mitigation' | 'trust_builders') => {
    onChange({
      ...data,
      [field]: [...data[field], '']
    });
  };

  const removeStringArrayItem = (field: 'quality_proof_points' | 'safety_assurance' | 'risk_mitigation' | 'trust_builders', index: number) => {
    onChange({
      ...data,
      [field]: data[field].filter((_: string, i: number) => i !== index)
    });
  };

  const updateStringArrayItem = (field: 'quality_proof_points' | 'safety_assurance' | 'risk_mitigation' | 'trust_builders', index: number, value: string) => {
    const currentArray = [...data[field]];
    currentArray[index] = value;
    onChange({ ...data, [field]: currentArray });
  };

  return (
    <div className="space-y-4 border-t pt-4">
      <h4 className="font-medium text-gray-900 flex items-center gap-2">
        <ShieldCheck className="h-5 w-5 text-red-600" />
        üõ°Ô∏è Objection Handling Data - X·ª≠ L√Ω Ph·∫£n ƒê·ªëi
      </h4>
      <div className="space-y-4">
        <Tabs defaultValue="price" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="price">Gi√° c·∫£</TabsTrigger>
            <TabsTrigger value="trust">Tin c·∫≠y</TabsTrigger>
            <TabsTrigger value="quality">Ch·∫•t l∆∞·ª£ng</TabsTrigger>
            <TabsTrigger value="guarantee">B·∫£o h√†nh</TabsTrigger>
          </TabsList>

          <TabsContent value="price" className="space-y-4">
            <div className="border rounded-lg p-4 bg-white">
              <Label className="text-sm font-semibold mb-3 block">üí∞ Bi·ªán minh v·ªÅ gi√°</Label>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="dailyCost">Chi ph√≠ h√†ng ng√†y</Label>
                  <Input
                    id="dailyCost"
                    value={data.price_justification.daily_cost}
                    onChange={(e) => updatePriceJustification('daily_cost', e.target.value)}
                    placeholder="VD: Ch·ªâ 15.000ƒë/ng√†y"
                  />
                </div>
                <div>
                  <Label htmlFor="valueProposition">Gi√° tr·ªã ƒë·ªÅ xu·∫•t</Label>
                  <Input
                    id="valueProposition"
                    value={data.price_justification.value_proposition}
                    onChange={(e) => updatePriceJustification('value_proposition', e.target.value)}
                    placeholder="VD: ƒê·∫ßu t∆∞ cho s·ª©c kh·ªèe l√† v√¥ gi√°"
                  />
                </div>
              </div>
              <div className="mt-4">
                <div className="flex items-center justify-between mb-2">
                  <Label>ƒêi·ªÉm so s√°nh</Label>
                  <Button type="button" onClick={() => {
                    const newComparisons = [...data.price_justification.comparison_points, ''];
                    updatePriceJustification('comparison_points', newComparisons);
                  }} size="sm" variant="outline">
                    <Plus className="h-4 w-4 mr-1" />
                    Th√™m
                  </Button>
                </div>
                {data.price_justification.comparison_points.map((point: string, index: number) => (
                  <div key={index} className="flex items-center gap-2 mb-2">
                    <Input
                      value={point}
                      onChange={(e) => {
                        const newComparisons = [...data.price_justification.comparison_points];
                        newComparisons[index] = e.target.value;
                        updatePriceJustification('comparison_points', newComparisons);
                      }}
                      placeholder="VD: R·∫ª h∆°n 1 ly cafe m·ªói ng√†y"
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      onClick={() => {
                        const newComparisons = data.price_justification.comparison_points.filter((_: string, i: number) => i !== index);
                        updatePriceJustification('comparison_points', newComparisons);
                      }}
                      size="sm"
                      variant="ghost"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="trust" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>X√¢y d·ª±ng l√≤ng tin</Label>
              <Button type="button" onClick={() => addStringArrayItem('trust_builders')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.trust_builders.map((trust: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Textarea
                  value={trust}
                  onChange={(e) => updateStringArrayItem('trust_builders', index, e.target.value)}
                  placeholder="VD: ƒê∆∞·ª£c ch·ª©ng nh·∫≠n FDA, h∆°n 10 nƒÉm kinh nghi·ªám..."
                  rows={2}
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeStringArrayItem('trust_builders', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="quality" className="space-y-2">
            <div className="flex items-center justify-between">
              <Label>ƒêi·ªÉm ch·ª©ng minh ch·∫•t l∆∞·ª£ng</Label>
              <Button type="button" onClick={() => addStringArrayItem('quality_proof_points')} size="sm" variant="outline">
                <Plus className="h-4 w-4 mr-1" />
                Th√™m
              </Button>
            </div>
            {data.quality_proof_points.map((proof: string, index: number) => (
              <div key={index} className="flex items-center gap-2">
                <Textarea
                  value={proof}
                  onChange={(e) => updateStringArrayItem('quality_proof_points', index, e.target.value)}
                  placeholder="VD: Ngu·ªìn g·ªëc thi√™n nhi√™n 100%, kh√¥ng ch·∫•t b·∫£o qu·∫£n..."
                  rows={2}
                  className="flex-1"
                />
                <Button
                  type="button"
                  onClick={() => removeStringArrayItem('quality_proof_points', index)}
                  size="sm"
                  variant="ghost"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </TabsContent>

          <TabsContent value="guarantee" className="space-y-4">
            <div className="border rounded-lg p-4 bg-white">
              <Label className="text-sm font-semibold mb-3 block">üõ°Ô∏è B·∫£o ƒë·∫£m hi·ªáu qu·∫£</Label>
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="timeline">Th·ªùi gian</Label>
                  <Input
                    id="timeline"
                    value={data.effectiveness_guarantee.timeline}
                    onChange={(e) => updateEffectivenessGuarantee('timeline', e.target.value)}
                    placeholder="VD: 30 ng√†y"
                  />
                </div>
                <div>
                  <Label htmlFor="successRate">T·ª∑ l·ªá th√†nh c√¥ng</Label>
                  <Input
                    id="successRate"
                    value={data.effectiveness_guarantee.success_rate}
                    onChange={(e) => updateEffectivenessGuarantee('success_rate', e.target.value)}
                    placeholder="VD: 95%"
                  />
                </div>
                <div>
                  <Label htmlFor="guaranteeText">Cam k·∫øt b·∫£o h√†nh</Label>
                  <Input
                    id="guaranteeText"
                    value={data.effectiveness_guarantee.guarantee_text}
                    onChange={(e) => updateEffectivenessGuarantee('guarantee_text', e.target.value)}
                    placeholder="VD: Ho√†n ti·ªÅn 100%"
                  />
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

// Re-export consultation forms
export {
  SmartFAQForm,
  NeedsAssessmentForm,
  BotPersonalityForm,
  ConsultationScenariosForm,
  CompetitorComparisonForm,
  CrossSellDataForm,
  ConsultationTrackingForm
} from "./ConsultationForms";
